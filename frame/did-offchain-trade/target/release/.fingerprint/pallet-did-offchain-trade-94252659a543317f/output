{"message":"unused imports: `Hash`, `IdentifyAccount`, `Member`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":285,"byte_end":289,"line_start":10,"line_end":10,"column_start":26,"column_end":30,"is_primary":true,"text":[{"text":"use sp_runtime::traits::{Hash, IdentifyAccount, Member, Verify};","highlight_start":26,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":291,"byte_end":306,"line_start":10,"line_end":10,"column_start":32,"column_end":47,"is_primary":true,"text":[{"text":"use sp_runtime::traits::{Hash, IdentifyAccount, Member, Verify};","highlight_start":32,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":308,"byte_end":314,"line_start":10,"line_end":10,"column_start":49,"column_end":55,"is_primary":true,"text":[{"text":"use sp_runtime::traits::{Hash, IdentifyAccount, Member, Verify};","highlight_start":49,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":285,"byte_end":316,"line_start":10,"line_end":10,"column_start":26,"column_end":57,"is_primary":true,"text":[{"text":"use sp_runtime::traits::{Hash, IdentifyAccount, Member, Verify};","highlight_start":26,"highlight_end":57}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Hash`, `IdentifyAccount`, `Member`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:10:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sp_runtime::traits::{Hash, IdentifyAccount, Member, Verify};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `sr25519`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":440,"byte_end":447,"line_start":13,"line_end":13,"column_start":29,"column_end":36,"is_primary":true,"text":[{"text":"use sp_core::{RuntimeDebug, sr25519, Pair};","highlight_start":29,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":438,"byte_end":447,"line_start":13,"line_end":13,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"use sp_core::{RuntimeDebug, sr25519, Pair};","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `sr25519`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:13:29\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sp_core::{RuntimeDebug, sr25519, Pair};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"This error occurs when the compiler was unable to infer the concrete type of a\nvariable. It can occur for several cases, the most common of which is a\nmismatch in the expected type that the compiler inferred for a variable's\ninitializing expression, and the actual type explicitly assigned to the\nvariable.\n\nFor example:\n\n```compile_fail,E0308\nlet x: i32 = \"I am not a number!\";\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n//      |             |\n//      |    initializing expression;\n//      |    compiler infers type `&str`\n//      |\n//    type `i32` assigned to variable `x`\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":4490,"byte_end":4497,"line_start":140,"line_end":140,"column_start":42,"column_end":49,"is_primary":true,"text":[{"text":"\t\t\tSelf::valid_signers(transaction.sigs, encoded, players)?;","highlight_start":42,"highlight_end":49}],"label":"expected `&[u8]`, found struct `std::vec::Vec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&[u8]`\n      found struct `std::vec::Vec<u8>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider borrowing here","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":4490,"byte_end":4497,"line_start":140,"line_end":140,"column_start":42,"column_end":49,"is_primary":true,"text":[{"text":"\t\t\tSelf::valid_signers(transaction.sigs, encoded, players)?;","highlight_start":42,"highlight_end":49}],"label":null,"suggested_replacement":"&encoded","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:140:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            Self::valid_signers(transaction.sigs, encoded, players)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `&[u8]`, found struct `std::vec::Vec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: consider borrowing here: `&encoded`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `\u001b[0m\u001b[0m\u001b[1m&[u8]\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                  found struct `\u001b[0m\u001b[0m\u001b[1mstd::vec::Vec<u8>\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"this function takes 3 parameters but 2 parameters were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":6498,"byte_end":6576,"line_start":197,"line_end":197,"column_start":5,"column_end":83,"is_primary":true,"text":[{"text":"\t\t\t\t<DocumentPermissionsState<T>>::mutate((&did, &access_condition.grantee), true);","highlight_start":5,"highlight_end":83}],"label":"expected 3 parameters","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 3 parameters but 2 parameters were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:197:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                <DocumentPermissionsState<T>>::mutate((&did, &access_condition.grantee), true);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected 3 parameters\u001b[0m\n\n"}
{"message":"expected a `std::ops::FnOnce<(&mut bool,)>` closure, found `bool`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":6627,"byte_end":6631,"line_start":198,"line_end":198,"column_start":50,"column_end":54,"is_primary":true,"text":[{"text":"\t\t\t\t<FinalizedOf<T>>::mutate(&condition_address, true);","highlight_start":50,"highlight_end":54}],"label":"expected an `FnOnce<(&mut bool,)>` closure, found `bool`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `std::ops::FnOnce<(&mut bool,)>` is not implemented for `bool`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by `sp_api_hidden_includes_decl_storage::hidden_include::StorageMap::mutate`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: expected a `std::ops::FnOnce<(&mut bool,)>` closure, found `bool`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:198:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m198\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                <FinalizedOf<T>>::mutate(&condition_address, true);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected an `FnOnce<(&mut bool,)>` closure, found `bool`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::ops::FnOnce<(&mut bool,)>` is not implemented for `bool`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `sp_api_hidden_includes_decl_storage::hidden_include::StorageMap::mutate`\u001b[0m\n\n"}
{"message":"expected a `std::ops::FnOnce<(&mut bool,)>` closure, found `bool`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":6681,"byte_end":6685,"line_start":199,"line_end":199,"column_start":48,"column_end":52,"is_primary":true,"text":[{"text":"\t\t\t\t<OutcomeOf<T>>::mutate(&condition_address, true);","highlight_start":48,"highlight_end":52}],"label":"expected an `FnOnce<(&mut bool,)>` closure, found `bool`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `std::ops::FnOnce<(&mut bool,)>` is not implemented for `bool`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by `sp_api_hidden_includes_decl_storage::hidden_include::StorageMap::mutate`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: expected a `std::ops::FnOnce<(&mut bool,)>` closure, found `bool`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:199:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                <OutcomeOf<T>>::mutate(&condition_address, true);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected an `FnOnce<(&mut bool,)>` closure, found `bool`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::ops::FnOnce<(&mut bool,)>` is not implemented for `bool`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `sp_api_hidden_includes_decl_storage::hidden_include::StorageMap::mutate`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"This error occurs when the compiler was unable to infer the concrete type of a\nvariable. It can occur for several cases, the most common of which is a\nmismatch in the expected type that the compiler inferred for a variable's\ninitializing expression, and the actual type explicitly assigned to the\nvariable.\n\nFor example:\n\n```compile_fail,E0308\nlet x: i32 = \"I am not a number!\";\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n//      |             |\n//      |    initializing expression;\n//      |    compiler infers type `&str`\n//      |\n//    type `i32` assigned to variable `x`\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":11227,"byte_end":11238,"line_start":409,"line_end":409,"column_start":33,"column_end":44,"is_primary":true,"text":[{"text":"\t\tif &signatures[0].verify(msg, &signers[0]) && &signatures[1].verify(msg, &signers[1]) {","highlight_start":33,"highlight_end":44}],"label":"expected struct `sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32`, found associated type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32`\n   found reference `&<T as frame_system::Trait>::AccountId`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider constraining the associated type `<T as frame_system::Trait>::AccountId` to `sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:409:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m409\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        if &signatures[0].verify(msg, &signers[0]) && &signatures[1].verify(msg, &signers[1]) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32`, found associated type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `\u001b[0m\u001b[0m\u001b[1m&sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found reference `\u001b[0m\u001b[0m\u001b[1m&<T as frame_system::Trait>::AccountId\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider constraining the associated type `<T as frame_system::Trait>::AccountId` to `sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"This error occurs when the compiler was unable to infer the concrete type of a\nvariable. It can occur for several cases, the most common of which is a\nmismatch in the expected type that the compiler inferred for a variable's\ninitializing expression, and the actual type explicitly assigned to the\nvariable.\n\nFor example:\n\n```compile_fail,E0308\nlet x: i32 = \"I am not a number!\";\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n//      |             |\n//      |    initializing expression;\n//      |    compiler infers type `&str`\n//      |\n//    type `i32` assigned to variable `x`\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":11200,"byte_end":11239,"line_start":409,"line_end":409,"column_start":6,"column_end":45,"is_primary":true,"text":[{"text":"\t\tif &signatures[0].verify(msg, &signers[0]) && &signatures[1].verify(msg, &signers[1]) {","highlight_start":6,"highlight_end":45}],"label":"expected `bool`, found `&bool`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider removing the borrow","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":11200,"byte_end":11239,"line_start":409,"line_end":409,"column_start":6,"column_end":45,"is_primary":true,"text":[{"text":"\t\tif &signatures[0].verify(msg, &signers[0]) && &signatures[1].verify(msg, &signers[1]) {","highlight_start":6,"highlight_end":45}],"label":null,"suggested_replacement":"signatures[0].verify(msg, &signers[0])","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:409:6\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m409\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        if &signatures[0].verify(msg, &signers[0]) && &signatures[1].verify(msg, &signers[1]) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `bool`, found `&bool`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: consider removing the borrow: `signatures[0].verify(msg, &signers[0])`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"This error occurs when the compiler was unable to infer the concrete type of a\nvariable. It can occur for several cases, the most common of which is a\nmismatch in the expected type that the compiler inferred for a variable's\ninitializing expression, and the actual type explicitly assigned to the\nvariable.\n\nFor example:\n\n```compile_fail,E0308\nlet x: i32 = \"I am not a number!\";\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n//      |             |\n//      |    initializing expression;\n//      |    compiler infers type `&str`\n//      |\n//    type `i32` assigned to variable `x`\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":11270,"byte_end":11281,"line_start":409,"line_end":409,"column_start":76,"column_end":87,"is_primary":true,"text":[{"text":"\t\tif &signatures[0].verify(msg, &signers[0]) && &signatures[1].verify(msg, &signers[1]) {","highlight_start":76,"highlight_end":87}],"label":"expected struct `sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32`, found associated type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32`\n   found reference `&<T as frame_system::Trait>::AccountId`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider constraining the associated type `<T as frame_system::Trait>::AccountId` to `sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:409:76\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m409\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        if &signatures[0].verify(msg, &signers[0]) && &signatures[1].verify(msg, &signers[1]) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32`, found associated type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `\u001b[0m\u001b[0m\u001b[1m&sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found reference `\u001b[0m\u001b[0m\u001b[1m&<T as frame_system::Trait>::AccountId\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider constraining the associated type `<T as frame_system::Trait>::AccountId` to `sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"This error occurs when the compiler was unable to infer the concrete type of a\nvariable. It can occur for several cases, the most common of which is a\nmismatch in the expected type that the compiler inferred for a variable's\ninitializing expression, and the actual type explicitly assigned to the\nvariable.\n\nFor example:\n\n```compile_fail,E0308\nlet x: i32 = \"I am not a number!\";\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n//      |             |\n//      |    initializing expression;\n//      |    compiler infers type `&str`\n//      |\n//    type `i32` assigned to variable `x`\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":11243,"byte_end":11282,"line_start":409,"line_end":409,"column_start":49,"column_end":88,"is_primary":true,"text":[{"text":"\t\tif &signatures[0].verify(msg, &signers[0]) && &signatures[1].verify(msg, &signers[1]) {","highlight_start":49,"highlight_end":88}],"label":"expected `bool`, found `&bool`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider removing the borrow","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":11243,"byte_end":11282,"line_start":409,"line_end":409,"column_start":49,"column_end":88,"is_primary":true,"text":[{"text":"\t\tif &signatures[0].verify(msg, &signers[0]) && &signatures[1].verify(msg, &signers[1]) {","highlight_start":49,"highlight_end":88}],"label":null,"suggested_replacement":"signatures[1].verify(msg, &signers[1])","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:409:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m409\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        if &signatures[0].verify(msg, &signers[0]) && &signatures[1].verify(msg, &signers[1]) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `bool`, found `&bool`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: consider removing the borrow: `signatures[1].verify(msg, &signers[1])`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"This error occurs when the compiler was unable to infer the concrete type of a\nvariable. It can occur for several cases, the most common of which is a\nmismatch in the expected type that the compiler inferred for a variable's\ninitializing expression, and the actual type explicitly assigned to the\nvariable.\n\nFor example:\n\n```compile_fail,E0308\nlet x: i32 = \"I am not a number!\";\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n//      |             |\n//      |    initializing expression;\n//      |    compiler infers type `&str`\n//      |\n//    type `i32` assigned to variable `x`\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":11334,"byte_end":11345,"line_start":411,"line_end":411,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"\t\t} else if &signatures[1].verify(msg, &signers[1]) && &signatures[0].verify(msg, &signers[0]) {","highlight_start":40,"highlight_end":51}],"label":"expected struct `sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32`, found associated type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32`\n   found reference `&<T as frame_system::Trait>::AccountId`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider constraining the associated type `<T as frame_system::Trait>::AccountId` to `sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:411:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m411\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        } else if &signatures[1].verify(msg, &signers[1]) && &signatures[0].verify(msg, &signers[0]) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32`, found associated type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `\u001b[0m\u001b[0m\u001b[1m&sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found reference `\u001b[0m\u001b[0m\u001b[1m&<T as frame_system::Trait>::AccountId\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider constraining the associated type `<T as frame_system::Trait>::AccountId` to `sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"This error occurs when the compiler was unable to infer the concrete type of a\nvariable. It can occur for several cases, the most common of which is a\nmismatch in the expected type that the compiler inferred for a variable's\ninitializing expression, and the actual type explicitly assigned to the\nvariable.\n\nFor example:\n\n```compile_fail,E0308\nlet x: i32 = \"I am not a number!\";\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n//      |             |\n//      |    initializing expression;\n//      |    compiler infers type `&str`\n//      |\n//    type `i32` assigned to variable `x`\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":11307,"byte_end":11346,"line_start":411,"line_end":411,"column_start":13,"column_end":52,"is_primary":true,"text":[{"text":"\t\t} else if &signatures[1].verify(msg, &signers[1]) && &signatures[0].verify(msg, &signers[0]) {","highlight_start":13,"highlight_end":52}],"label":"expected `bool`, found `&bool`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider removing the borrow","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":11307,"byte_end":11346,"line_start":411,"line_end":411,"column_start":13,"column_end":52,"is_primary":true,"text":[{"text":"\t\t} else if &signatures[1].verify(msg, &signers[1]) && &signatures[0].verify(msg, &signers[0]) {","highlight_start":13,"highlight_end":52}],"label":null,"suggested_replacement":"signatures[1].verify(msg, &signers[1])","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:411:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m411\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        } else if &signatures[1].verify(msg, &signers[1]) && &signatures[0].verify(msg, &signers[0]) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `bool`, found `&bool`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: consider removing the borrow: `signatures[1].verify(msg, &signers[1])`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"This error occurs when the compiler was unable to infer the concrete type of a\nvariable. It can occur for several cases, the most common of which is a\nmismatch in the expected type that the compiler inferred for a variable's\ninitializing expression, and the actual type explicitly assigned to the\nvariable.\n\nFor example:\n\n```compile_fail,E0308\nlet x: i32 = \"I am not a number!\";\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n//      |             |\n//      |    initializing expression;\n//      |    compiler infers type `&str`\n//      |\n//    type `i32` assigned to variable `x`\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":11377,"byte_end":11388,"line_start":411,"line_end":411,"column_start":83,"column_end":94,"is_primary":true,"text":[{"text":"\t\t} else if &signatures[1].verify(msg, &signers[1]) && &signatures[0].verify(msg, &signers[0]) {","highlight_start":83,"highlight_end":94}],"label":"expected struct `sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32`, found associated type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected reference `&sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32`\n   found reference `&<T as frame_system::Trait>::AccountId`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider constraining the associated type `<T as frame_system::Trait>::AccountId` to `sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:411:83\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m411\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        } else if &signatures[1].verify(msg, &signers[1]) && &signatures[0].verify(msg, &signers[0]) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32`, found associated type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `\u001b[0m\u001b[0m\u001b[1m&sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found reference `\u001b[0m\u001b[0m\u001b[1m&<T as frame_system::Trait>::AccountId\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider constraining the associated type `<T as frame_system::Trait>::AccountId` to `sp_api_hidden_includes_decl_storage::hidden_include::sp_runtime::AccountId32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"This error occurs when the compiler was unable to infer the concrete type of a\nvariable. It can occur for several cases, the most common of which is a\nmismatch in the expected type that the compiler inferred for a variable's\ninitializing expression, and the actual type explicitly assigned to the\nvariable.\n\nFor example:\n\n```compile_fail,E0308\nlet x: i32 = \"I am not a number!\";\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n//      |             |\n//      |    initializing expression;\n//      |    compiler infers type `&str`\n//      |\n//    type `i32` assigned to variable `x`\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":11350,"byte_end":11389,"line_start":411,"line_end":411,"column_start":56,"column_end":95,"is_primary":true,"text":[{"text":"\t\t} else if &signatures[1].verify(msg, &signers[1]) && &signatures[0].verify(msg, &signers[0]) {","highlight_start":56,"highlight_end":95}],"label":"expected `bool`, found `&bool`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider removing the borrow","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":11350,"byte_end":11389,"line_start":411,"line_end":411,"column_start":56,"column_end":95,"is_primary":true,"text":[{"text":"\t\t} else if &signatures[1].verify(msg, &signers[1]) && &signatures[0].verify(msg, &signers[0]) {","highlight_start":56,"highlight_end":95}],"label":null,"suggested_replacement":"signatures[0].verify(msg, &signers[0])","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:411:56\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m411\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        } else if &signatures[1].verify(msg, &signers[1]) && &signatures[0].verify(msg, &signers[0]) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `bool`, found `&bool`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: consider removing the borrow: `signatures[0].verify(msg, &signers[0])`\u001b[0m\n\n"}
{"message":"the trait bound `u32: _::_parity_scale_codec::EncodeLike<<T as frame_system::Trait>::AccountId>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":12133,"byte_end":12154,"line_start":442,"line_end":442,"column_start":3,"column_end":24,"is_primary":true,"text":[{"text":"\t\t<KeyOfDID<T>>::insert(_key, &did);","highlight_start":3,"highlight_end":24}],"label":"the trait `_::_parity_scale_codec::EncodeLike<<T as frame_system::Trait>::AccountId>` is not implemented for `u32`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required by `sp_api_hidden_includes_decl_storage::hidden_include::StorageMap::insert`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `u32: _::_parity_scale_codec::EncodeLike<<T as frame_system::Trait>::AccountId>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:442:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m442\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        <KeyOfDID<T>>::insert(_key, &did);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `_::_parity_scale_codec::EncodeLike<<T as frame_system::Trait>::AccountId>` is not implemented for `u32`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `sp_api_hidden_includes_decl_storage::hidden_include::StorageMap::insert`\u001b[0m\n\n"}
{"message":"the trait bound `&<T as frame_system::Trait>::AccountId: _::_parity_scale_codec::EncodeLike<u32>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":12161,"byte_end":12165,"line_start":442,"line_end":442,"column_start":31,"column_end":35,"is_primary":true,"text":[{"text":"\t\t<KeyOfDID<T>>::insert(_key, &did);","highlight_start":31,"highlight_end":35}],"label":"the trait `_::_parity_scale_codec::EncodeLike<u32>` is not implemented for `&<T as frame_system::Trait>::AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"required by `sp_api_hidden_includes_decl_storage::hidden_include::StorageMap::insert`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider removing 1 leading `&`-references","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":12161,"byte_end":12162,"line_start":442,"line_end":442,"column_start":31,"column_end":32,"is_primary":true,"text":[{"text":"\t\t<KeyOfDID<T>>::insert(_key, &did);","highlight_start":31,"highlight_end":32}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `&<T as frame_system::Trait>::AccountId: _::_parity_scale_codec::EncodeLike<u32>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:442:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m442\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        <KeyOfDID<T>>::insert(_key, &did);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `_::_parity_scale_codec::EncodeLike<u32>` is not implemented for `&<T as frame_system::Trait>::AccountId`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: consider removing 1 leading `&`-references\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `sp_api_hidden_includes_decl_storage::hidden_include::StorageMap::insert`\u001b[0m\n\n"}
{"message":"the trait bound `<T as Trait>::Event: std::convert::From<RawEvent<u32, _>>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait. Erroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":9827,"byte_end":9846,"line_start":337,"line_end":337,"column_start":4,"column_end":23,"is_primary":true,"text":[{"text":"\t\t\tSelf::deposit_event(","highlight_start":4,"highlight_end":23}],"label":"the trait `std::convert::From<RawEvent<u32, _>>` is not implemented for `<T as Trait>::Event`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":21211,"byte_end":21462,"line_start":406,"line_end":412,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        $ vis fn deposit_event","highlight_start":9,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"required by `Module::<T>::deposit_event`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":36387,"byte_end":36622,"line_start":742,"line_end":747,"column_start":7,"column_end":6,"is_primary":false,"text":[{"text":"    } $ crate :: decl_module !","highlight_start":7,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":19701,"byte_end":20183,"line_start":375,"line_end":383,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":13890,"byte_end":14624,"line_start":265,"line_end":277,"column_start":5,"column_end":21,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":15428,"byte_end":16172,"line_start":293,"line_end":305,"column_start":5,"column_end":54,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":2016,"byte_end":2531,"line_start":41,"line_end":49,"column_start":5,"column_end":19,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":11524,"byte_end":12026,"line_start":222,"line_end":230,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":330,"byte_end":682,"line_start":7,"line_end":13,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":2471,"byte_end":10209,"line_start":79,"line_end":363,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"decl_module! {","highlight_start":1,"highlight_end":15},{"text":"\tpub struct Module<T: Trait> for enum Call where origin: T::Origin {","highlight_start":1,"highlight_end":69},{"text":"\t\ttype Error = Error<T>;","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tfn deposit_event() = default;","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn createAccessCondition(","highlight_start":1,"highlight_end":32},{"text":"\t\t\torigin,","highlight_start":1,"highlight_end":11},{"text":"\t\t\tplayers: Vec<T::AccountId>, ","highlight_start":1,"highlight_end":32},{"text":"\t\t\tnonce: u32,","highlight_start":1,"highlight_end":15},{"text":"\t\t\tdid: T::AccountId,","highlight_start":1,"highlight_end":22},{"text":"\t\t\tcondition_address: T::AccountId","highlight_start":1,"highlight_end":35},{"text":"\t\t) -> DispatchResult {","highlight_start":1,"highlight_end":24},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tensure!(players.len() == 2, Error::<T>::InvalidPlayerLength);","highlight_start":1,"highlight_end":65},{"text":"\t\t\tlet isPlayer1: bool = T::BooleanOwner::boolean_owner(&did, &players[0]);","highlight_start":1,"highlight_end":76},{"text":"\t\t\tlet isPlayer2: bool = T::BooleanOwner::boolean_owner(&did, &players[1]);","highlight_start":1,"highlight_end":76},{"text":"\t\t\tensure!(isPlayer1 == true || isPlayer2 == true, Error::<T>::NotOwner);","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tensure!(Self::is_address(&condition_address), Error::<T>::ExistAddress);","highlight_start":1,"highlight_end":76},{"text":"\t\t\t<AccessConditionAddressList<T>>::append(vec![condition_address.clone()])?;","highlight_start":1,"highlight_end":78},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// TODO: Refactoring and default <DIDKey> is 2.","highlight_start":1,"highlight_end":51},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet mut didKey = Self::did_key();","highlight_start":1,"highlight_end":37},{"text":"\t\t\tif didKey == 0 || didKey == 1 {","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\tdidKey = 2;","highlight_start":1,"highlight_end":16},{"text":"\t\t\t} ","highlight_start":1,"highlight_end":6},{"text":"\t\t\t<DIDList<T>>::insert(didKey, &did);","highlight_start":1,"highlight_end":39},{"text":"\t\t\t<KeyOfDID<T>>::insert(&did, didKey);","highlight_start":1,"highlight_end":40},{"text":"\t\t\t<DIDKey>::mutate(|key| *key += 1);","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tif isPlayer1 == true {","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tSelf::set_access_condition(condition_address, nonce, players[0], players[1], did)?;","highlight_start":1,"highlight_end":88},{"text":"\t\t\t} else {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tSelf::set_access_condition(condition_address, nonce, players[1], players[0], did)?;","highlight_start":1,"highlight_end":88},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn intendSettle(","highlight_start":1,"highlight_end":23},{"text":"\t\t\torigin, ","highlight_start":1,"highlight_end":12},{"text":"\t\t\tcondition_address: T::AccountId,","highlight_start":1,"highlight_end":36},{"text":"\t\t\ttransaction: StateProof<Signature>,","highlight_start":1,"highlight_end":39},{"text":"\t\t) -> DispatchResult {","highlight_start":1,"highlight_end":24},{"text":"\t\t\tlet who = ensure_signed(origin)?;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet players: Vec<T::AccountId> = access_condition.players;","highlight_start":1,"highlight_end":62},{"text":"\t\t\tensure!(&who == &players[0] || &who == &players[1], Error::<T>::InvalidSender);","highlight_start":1,"highlight_end":83},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet mut encoded = transaction.appState.nonce.encode();","highlight_start":1,"highlight_end":58},{"text":"\t\t\tencoded.extend(transaction.appState.seqNum.encode());","highlight_start":1,"highlight_end":57},{"text":"\t\t\tencoded.extend(transaction.appState.state.encode());","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tSelf::valid_signers(transaction.sigs, encoded, players)?;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tensure!(access_condition.nonce == transaction.appState.nonce, Error::<T>::InvalidNonce);","highlight_start":1,"highlight_end":92},{"text":"\t\t\tensure!(access_condition.seqNum < transaction.appState.seqNum, Error::<T>::InvalidSeqNum);","highlight_start":1,"highlight_end":94},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tif transaction.appState.state == 0 {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tlet new_access_condition = AccessConditionOf::<T> {","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\tnonce: access_condition.nonce,","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\tplayers: access_condition.players.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t\tseqNum: transaction.appState.seqNum,","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\t\tstatus: AppStatus::IDLE,","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\towner: access_condition.grantee.clone(),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\tgrantee: access_condition.owner.clone(),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t<AccessConditionList<T>>::mutate(&condition_address, |new| *new = Some(new_access_condition.clone()));","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::SwapPosition(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\tcondition_address,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t);","highlight_start":1,"highlight_end":7},{"text":"\t\t\t} else if transaction.appState.state == 1 {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tlet new_access_condition = AccessConditionOf::<T> {","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\tnonce: access_condition.nonce,","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\tplayers: access_condition.players.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t\tseqNum: transaction.appState.seqNum,","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\t\tstatus: AppStatus::IDLE,","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\towner: access_condition.owner.clone(),","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\t\tgrantee: access_condition.grantee.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t<AccessConditionList<T>>::mutate(&condition_address, |new| *new = Some(new_access_condition.clone()));","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::SetIdle(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\tcondition_address,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t} else {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tlet did = match Self::did_list(transaction.appState.state) {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t\tSome(_did) => _did,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tNone => return Err(Error::<T>::InvalidState.into())","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet new_access_condition = AccessConditionOf::<T> {","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\tnonce: access_condition.nonce,","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\tplayers: access_condition.players.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t\tseqNum: transaction.appState.seqNum,","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\t\tstatus: AppStatus::FINALIZED,","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\towner: access_condition.owner.clone(),","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\t\tgrantee: access_condition.grantee.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t<AccessConditionList<T>>::mutate(&condition_address, |new| *new = Some(new_access_condition.clone()));","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t<DocumentPermissionsState<T>>::mutate((&did, &access_condition.grantee), true);","highlight_start":1,"highlight_end":84},{"text":"\t\t\t\t<FinalizedOf<T>>::mutate(&condition_address, true);","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t<OutcomeOf<T>>::mutate(&condition_address, true);","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::IntendSettle(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\tcondition_address,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t);","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getStatus(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":80},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet status = access_condition.status;","highlight_start":1,"highlight_end":41},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tif status == AppStatus::IDLE {","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::IdleStatus(","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\tcondition_address, ","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t));","highlight_start":1,"highlight_end":8},{"text":"\t\t\t} else {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::FinalizedStatus(","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\t\tcondition_address,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t);","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getSeqNum(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":80},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet seq = access_condition.seqNum;","highlight_start":1,"highlight_end":38},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::SeqNum(","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\tseq,","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getOwner(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":79},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet owner = access_condition.owner;","highlight_start":1,"highlight_end":39},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::Owner(","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\towner,","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getGrantee(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":81},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet grantee = access_condition.grantee;","highlight_start":1,"highlight_end":43},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::Grantee(","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tgrantee,","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t","highlight_start":1,"highlight_end":3},{"text":"\t\t//pub fn isFinalized() {}","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t//pub fn getOutcome() {}","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t//pub fn checkPermissions() {}","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn setNewDID(origin, did: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":66},{"text":"\t\t\tlet who = ensure_signed(origin)?;","highlight_start":1,"highlight_end":37},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet isOwner: bool = T::BooleanOwner::boolean_owner(&did, &who);","highlight_start":1,"highlight_end":67},{"text":"\t\t\tensure!(isOwner == true, Error::<T>::NotOwner);","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet mut didKey = Self::did_key();","highlight_start":1,"highlight_end":37},{"text":"\t\t\tif didKey == 0 || didKey == 1{","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tdidKey = 2;","highlight_start":1,"highlight_end":16},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t<DIDList<T>>::insert(didKey, &did);","highlight_start":1,"highlight_end":39},{"text":"\t\t\t<KeyOfDID<T>>::insert(&did, didKey);","highlight_start":1,"highlight_end":40},{"text":"\t\t\t<DIDKey>::mutate(|key| *key += 1);","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::NewDID(","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\tdid,","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\tdidKey","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getDIDKey(origin, did: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":66},{"text":"\t\t\tlet who = ensure_signed(origin)?;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet key = match Self::key_of_did(&did) {","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\tSome(_key) => _key,","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tNone => return Err(Error::<T>::NotExist.into())","highlight_start":1,"highlight_end":52},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::DIDKey(","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\tkey","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getDID(origin, key: u32) -> DispatchResult {","highlight_start":1,"highlight_end":54},{"text":"\t\t\tlet who = ensure_signed(origin)?;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet did = match Self::did_list(key) {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tSome(_did) => _did,","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tNone => return Err(Error::<T>::NotExist.into())","highlight_start":1,"highlight_end":52},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::DID(","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tdid","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following implementations were found:\n  <T as std::convert::From<!>>\n  <T as std::convert::From<T>>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `std::convert::Into<<T as Trait>::Event>` for `RawEvent<u32, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `<T as Trait>::Event: std::convert::From<RawEvent<u32, _>>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:337:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdecl_module! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct Module<T: Trait> for enum Call where origin: T::Origin {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        type Error = Error<T>;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Self::deposit_event(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `std::convert::From<RawEvent<u32, _>>` is not implemented for `<T as Trait>::Event`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m362\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m363\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by `Module::<T>::deposit_event`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following implementations were found:\u001b[0m\n\u001b[0m              <T as std::convert::From<!>>\u001b[0m\n\u001b[0m              <T as std::convert::From<T>>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `std::convert::Into<<T as Trait>::Event>` for `RawEvent<u32, _>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unused import: `Pair`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":449,"byte_end":453,"line_start":13,"line_end":13,"column_start":38,"column_end":42,"is_primary":true,"text":[{"text":"use sp_core::{RuntimeDebug, sr25519, Pair};","highlight_start":38,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Pair`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:13:38\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sp_core::{RuntimeDebug, sr25519, Pair};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\n"}
{"message":"aborting due to 15 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 15 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0061, E0277, E0308.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0061, E0277, E0308.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0061`.\u001b[0m\n"}
