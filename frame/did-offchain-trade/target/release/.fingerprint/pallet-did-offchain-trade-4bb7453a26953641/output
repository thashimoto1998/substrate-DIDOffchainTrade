{"message":"failed to resolve: use of undeclared type or module `sr25519`","code":{"code":"E0433","explanation":"An undeclared type or module was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type or module `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":11719,"byte_end":11726,"line_start":434,"line_end":434,"column_start":34,"column_end":41,"is_primary":true,"text":[{"text":"\tpub fn account_pair(s: &str) -> sr25519::Pair {","highlight_start":34,"highlight_end":41}],"label":"use of undeclared type or module `sr25519`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type or module `sr25519`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:434:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m434\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn account_pair(s: &str) -> sr25519::Pair {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type or module `sr25519`\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type or module `sr25519`","code":{"code":"E0433","explanation":"An undeclared type or module was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type or module `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":11737,"byte_end":11744,"line_start":435,"line_end":435,"column_start":3,"column_end":10,"is_primary":true,"text":[{"text":"\t\tsr25519::Pair::from_string(&format!(\"//{}\", s), None)","highlight_start":3,"highlight_end":10}],"label":"use of undeclared type or module `sr25519`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type or module `sr25519`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:435:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m435\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        sr25519::Pair::from_string(&format!(\"//{}\", s), None)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type or module `sr25519`\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type or module `sr25519`","code":{"code":"E0433","explanation":"An undeclared type or module was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type or module `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":11869,"byte_end":11876,"line_start":438,"line_end":438,"column_start":33,"column_end":40,"is_primary":true,"text":[{"text":"\tpub fn account_key(s: &str) -> sr25519::Public {","highlight_start":33,"highlight_end":40}],"label":"use of undeclared type or module `sr25519`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type or module `sr25519`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:438:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn account_key(s: &str) -> sr25519::Public {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type or module `sr25519`\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type or module `sr25519`","code":{"code":"E0433","explanation":"An undeclared type or module was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type or module `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":11889,"byte_end":11896,"line_start":439,"line_end":439,"column_start":3,"column_end":10,"is_primary":true,"text":[{"text":"\t\tsr25519::Pair::from_string(&format!(\"//{}\", s), None)","highlight_start":3,"highlight_end":10}],"label":"use of undeclared type or module `sr25519`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type or module `sr25519`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:439:3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m439\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        sr25519::Pair::from_string(&format!(\"//{}\", s), None)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type or module `sr25519`\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type or module `sr25519`","code":{"code":"E0433","explanation":"An undeclared type or module was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type or module `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":12040,"byte_end":12047,"line_start":444,"line_end":444,"column_start":39,"column_end":46,"is_primary":true,"text":[{"text":"\tpub fn create_condition_address() -> sr25519::Public {","highlight_start":39,"highlight_end":46}],"label":"use of undeclared type or module `sr25519`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type or module `sr25519`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:444:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m444\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn create_condition_address() -> sr25519::Public {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type or module `sr25519`\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type or module `sr25519`","code":{"code":"E0433","explanation":"An undeclared type or module was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type or module `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":12258,"byte_end":12265,"line_start":448,"line_end":448,"column_start":30,"column_end":37,"is_primary":true,"text":[{"text":"\t\tlet access_condition_pair: sr25519::Pair = Self::account_pair(access_condition_string);","highlight_start":30,"highlight_end":37}],"label":"use of undeclared type or module `sr25519`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type or module `sr25519`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:448:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m448\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let access_condition_pair: sr25519::Pair = Self::account_pair(access_condition_string);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type or module `sr25519`\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type or module `sr25519`","code":{"code":"E0433","explanation":"An undeclared type or module was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type or module `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":12350,"byte_end":12357,"line_start":449,"line_end":449,"column_start":32,"column_end":39,"is_primary":true,"text":[{"text":"\t\tlet access_condition_public: sr25519::Public = Self::account_key(access_condition_pair);","highlight_start":32,"highlight_end":39}],"label":"use of undeclared type or module `sr25519`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type or module `sr25519`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:449:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m449\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let access_condition_public: sr25519::Public = Self::account_key(access_condition_pair);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type or module `sr25519`\u001b[0m\n\n"}
{"message":"unused import: `MultiSignature`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":276,"byte_end":290,"line_start":10,"line_end":10,"column_start":18,"column_end":32,"is_primary":true,"text":[{"text":"use sp_runtime::{MultiSignature};","highlight_start":18,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":259,"byte_end":292,"line_start":10,"line_end":10,"column_start":1,"column_end":34,"is_primary":true,"text":[{"text":"use sp_runtime::{MultiSignature};","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `MultiSignature`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:10:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sp_runtime::{MultiSignature};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused imports: `Hash`, `IdentifyAccount`, `Member`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":318,"byte_end":322,"line_start":11,"line_end":11,"column_start":26,"column_end":30,"is_primary":true,"text":[{"text":"use sp_runtime::traits::{Hash, IdentifyAccount, Member, Verify};","highlight_start":26,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":324,"byte_end":339,"line_start":11,"line_end":11,"column_start":32,"column_end":47,"is_primary":true,"text":[{"text":"use sp_runtime::traits::{Hash, IdentifyAccount, Member, Verify};","highlight_start":32,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":341,"byte_end":347,"line_start":11,"line_end":11,"column_start":49,"column_end":55,"is_primary":true,"text":[{"text":"use sp_runtime::traits::{Hash, IdentifyAccount, Member, Verify};","highlight_start":49,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":318,"byte_end":349,"line_start":11,"line_end":11,"column_start":26,"column_end":57,"is_primary":true,"text":[{"text":"use sp_runtime::traits::{Hash, IdentifyAccount, Member, Verify};","highlight_start":26,"highlight_end":57}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Hash`, `IdentifyAccount`, `Member`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:11:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sp_runtime::traits::{Hash, IdentifyAccount, Member, Verify};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":2874,"byte_end":2886,"line_start":97,"line_end":97,"column_start":17,"column_end":29,"is_primary":true,"text":[{"text":"\t\t\tplayers: Vec<T::AccountId>, ","highlight_start":17,"highlight_end":29}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:97:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            players: Vec<T::AccountId>, \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":2913,"byte_end":2925,"line_start":99,"line_end":99,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"\t\t\tdid: T::AccountId,","highlight_start":9,"highlight_end":21}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:99:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            did: T::AccountId,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":4035,"byte_end":4047,"line_start":137,"line_end":137,"column_start":23,"column_end":35,"is_primary":true,"text":[{"text":"\t\t\tcondition_address: T::AccountId,","highlight_start":23,"highlight_end":35}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:137:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            condition_address: T::AccountId,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":7086,"byte_end":7098,"line_start":225,"line_end":225,"column_start":47,"column_end":59,"is_primary":true,"text":[{"text":"\t\tpub fn getStatus(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":47,"highlight_end":59}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:225:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        pub fn getStatus(origin, condition_address: T::AccountId) -> DispatchResult {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":7774,"byte_end":7786,"line_start":253,"line_end":253,"column_start":47,"column_end":59,"is_primary":true,"text":[{"text":"\t\tpub fn getSeqNum(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":47,"highlight_end":59}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:253:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        pub fn getSeqNum(origin, condition_address: T::AccountId) -> DispatchResult {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":8246,"byte_end":8258,"line_start":273,"line_end":273,"column_start":46,"column_end":58,"is_primary":true,"text":[{"text":"\t\tpub fn getOwner(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":46,"highlight_end":58}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:273:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        pub fn getOwner(origin, condition_address: T::AccountId) -> DispatchResult {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":8722,"byte_end":8734,"line_start":293,"line_end":293,"column_start":48,"column_end":60,"is_primary":true,"text":[{"text":"\t\tpub fn getGrantee(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":48,"highlight_end":60}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:293:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m293\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        pub fn getGrantee(origin, condition_address: T::AccountId) -> DispatchResult {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":9285,"byte_end":9297,"line_start":320,"line_end":320,"column_start":33,"column_end":45,"is_primary":true,"text":[{"text":"\t\tpub fn setNewDID(origin, did: T::AccountId) -> DispatchResult {","highlight_start":33,"highlight_end":45}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:320:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m320\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        pub fn setNewDID(origin, did: T::AccountId) -> DispatchResult {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":9908,"byte_end":9920,"line_start":348,"line_end":348,"column_start":33,"column_end":45,"is_primary":true,"text":[{"text":"\t\tpub fn getDIDKey(origin, did: T::AccountId) -> DispatchResult {","highlight_start":33,"highlight_end":45}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:348:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m348\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        pub fn getDIDKey(origin, did: T::AccountId) -> DispatchResult {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":2051,"byte_end":2063,"line_start":74,"line_end":74,"column_start":41,"column_end":53,"is_primary":true,"text":[{"text":"\t\t\tmap hasher(blake2_256) u32 => Option<T::AccountId>;","highlight_start":41,"highlight_end":53}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:74:41\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            map hasher(blake2_256) u32 => Option<T::AccountId>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":2140,"byte_end":2152,"line_start":76,"line_end":76,"column_start":27,"column_end":39,"is_primary":true,"text":[{"text":"\t\t\tmap hasher(blake2_256) T::AccountId => Option<AccessConditionOf<T>>;","highlight_start":27,"highlight_end":39}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:76:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            map hasher(blake2_256) T::AccountId => Option<AccessConditionOf<T>>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":2294,"byte_end":2306,"line_start":79,"line_end":79,"column_start":41,"column_end":53,"is_primary":true,"text":[{"text":"\t\t\tmap hasher(blake2_256) u32 => Option<T::AccountId>;","highlight_start":41,"highlight_end":53}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:79:41\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            map hasher(blake2_256) u32 => Option<T::AccountId>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":2372,"byte_end":2384,"line_start":81,"line_end":81,"column_start":27,"column_end":39,"is_primary":true,"text":[{"text":"\t\t\tmap hasher(blake2_256) T::AccountId => Option<u32>;","highlight_start":27,"highlight_end":39}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:81:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            map hasher(blake2_256) T::AccountId => Option<u32>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":2485,"byte_end":2497,"line_start":83,"line_end":83,"column_start":34,"column_end":46,"is_primary":true,"text":[{"text":"\t\t\tdouble_map hasher(blake2_256) T::AccountId, hasher(blake2_256) T::AccountId => bool;","highlight_start":34,"highlight_end":46}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:83:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            double_map hasher(blake2_256) T::AccountId, hasher(blake2_256) T::AccountId => bool;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":2518,"byte_end":2530,"line_start":83,"line_end":83,"column_start":67,"column_end":79,"is_primary":true,"text":[{"text":"\t\t\tdouble_map hasher(blake2_256) T::AccountId, hasher(blake2_256) T::AccountId => bool;","highlight_start":67,"highlight_end":79}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:83:67\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            double_map hasher(blake2_256) T::AccountId, hasher(blake2_256) T::AccountId => bool;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":2582,"byte_end":2594,"line_start":84,"line_end":84,"column_start":43,"column_end":55,"is_primary":true,"text":[{"text":"\t\tpub FinalizedOf: map hasher(blake2_256) T::AccountId => bool;","highlight_start":43,"highlight_end":55}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:84:43\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        pub FinalizedOf: map hasher(blake2_256) T::AccountId => bool;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":2644,"byte_end":2656,"line_start":85,"line_end":85,"column_start":41,"column_end":53,"is_primary":true,"text":[{"text":"\t\tpub OutcomeOf: map hasher(blake2_256) T::AccountId => bool;","highlight_start":41,"highlight_end":53}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:85:41\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        pub OutcomeOf: map hasher(blake2_256) T::AccountId => bool;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `BlockNumber` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":23701,"byte_end":23712,"line_start":464,"line_end":464,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":43,"highlight_end":54}],"label":"ambiguous associated type `BlockNumber`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":35455,"byte_end":35679,"line_start":721,"line_end":726,"column_start":7,"column_end":6,"is_primary":false,"text":[{"text":"    ; $ crate :: decl_module !","highlight_start":7,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":19701,"byte_end":20183,"line_start":375,"line_end":383,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":13890,"byte_end":14624,"line_start":265,"line_end":277,"column_start":5,"column_end":21,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":15428,"byte_end":16172,"line_start":293,"line_end":305,"column_start":5,"column_end":54,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":2016,"byte_end":2531,"line_start":41,"line_end":49,"column_start":5,"column_end":19,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":11524,"byte_end":12026,"line_start":222,"line_end":230,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":330,"byte_end":682,"line_start":7,"line_end":13,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":2672,"byte_end":10492,"line_start":89,"line_end":382,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"decl_module! {","highlight_start":1,"highlight_end":15},{"text":"\tpub struct Module<T: Trait> for enum Call where origin: T::Origin {","highlight_start":1,"highlight_end":69},{"text":"\t\ttype Error = Error<T>;","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tfn deposit_event() = default;","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn createAccessCondition(","highlight_start":1,"highlight_end":32},{"text":"\t\t\torigin,","highlight_start":1,"highlight_end":11},{"text":"\t\t\tplayers: Vec<T::AccountId>, ","highlight_start":1,"highlight_end":32},{"text":"\t\t\tnonce: u32,","highlight_start":1,"highlight_end":15},{"text":"\t\t\tdid: T::AccountId,","highlight_start":1,"highlight_end":22},{"text":"\t\t) -> DispatchResult {","highlight_start":1,"highlight_end":24},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tensure!(players.len() == 2, Error::<T>::InvalidPlayerLength);","highlight_start":1,"highlight_end":65},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet isPlayer1: bool = <did::Module<T>>::boolean_owner(&did, &players[0]);","highlight_start":1,"highlight_end":77},{"text":"\t\t\tlet isPlayer2: bool = <did::Module<T>>::boolean_owner(&did, &players[1]);","highlight_start":1,"highlight_end":77},{"text":"\t\t\tensure!(isPlayer1 == true || isPlayer2 == true, Error::<T>::NotOwner);","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// Create new Address of Access Condition","highlight_start":1,"highlight_end":45},{"text":"\t\t\tlet condition_address = Self::create_condition_address();","highlight_start":1,"highlight_end":61},{"text":"\t\t","highlight_start":1,"highlight_end":3},{"text":"\t\t\t// TODO: Refactoring and default <DIDKey> is 2.","highlight_start":1,"highlight_end":51},{"text":"\t\t\tlet mut didKey: u32 = |_didKey| {","highlight_start":1,"highlight_end":37},{"text":"\t\t\t\tlet mut _didKey = Self::did_key();","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\tif _didKey == 0 || _didKey == 1 {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t\t\t_didKey = 2;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t_didKey","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t} else {","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\t_didKey","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t<DIDList<T>>::insert(didKey, &did);","highlight_start":1,"highlight_end":39},{"text":"\t\t\t<KeyOfDID<T>>::insert(&did, didKey);","highlight_start":1,"highlight_end":40},{"text":"\t\t\t<DIDKey>::mutate(|key| *key += 1);","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tif isPlayer1 == true {","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tSelf::set_access_condition(condition_address, nonce, players[0], players[1], did)?;","highlight_start":1,"highlight_end":88},{"text":"\t\t\t} else {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tSelf::set_access_condition(condition_address, nonce, players[1], players[0], did)?;","highlight_start":1,"highlight_end":88},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn intendSettle(","highlight_start":1,"highlight_end":23},{"text":"\t\t\torigin, ","highlight_start":1,"highlight_end":12},{"text":"\t\t\tcondition_address: T::AccountId,","highlight_start":1,"highlight_end":36},{"text":"\t\t\ttransaction: StateProof<T::Signature>,","highlight_start":1,"highlight_end":42},{"text":"\t\t) -> DispatchResult {","highlight_start":1,"highlight_end":24},{"text":"\t\t\tlet who = ensure_signed(origin)?;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet players: Vec<T::AccountId> = access_condition.players;","highlight_start":1,"highlight_end":62},{"text":"\t\t\tensure!(&who == &players[0] || &who == &players[1], Error::<T>::InvalidSender);","highlight_start":1,"highlight_end":83},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet mut encoded = transaction.appState.nonce.encode();","highlight_start":1,"highlight_end":58},{"text":"\t\t\tencoded.extend(transaction.appState.seqNum.encode());","highlight_start":1,"highlight_end":57},{"text":"\t\t\tencoded.extend(transaction.appState.state.encode());","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tSelf::valid_signers(transaction.sigs, encoded, players)?;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tensure!(access_condition.nonce == transaction.appState.nonce, Error::<T>::InvalidNonce);","highlight_start":1,"highlight_end":92},{"text":"\t\t\tensure!(access_condition.seqNum < transaction.appState.seqNum, Error::<T>::InvalidSeqNum);","highlight_start":1,"highlight_end":94},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tif transaction.appState.state == 0 {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tlet new_access_condition = AccessConditionOf::<T> {","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\tnonce: access_condition.nonce,","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\tplayers: access_condition.players.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t\tseqNum: transaction.seqNum,","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tstatus: AppStatus::IDLE,","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\towner: access_condition.grantee.clone(),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\tgrantee: access_condition.owner.clone(),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t<AccessConditionList<T>>::mutate(&condition_address, |new| *new = Some(new_access_condition.clone()));","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::SwapPosition(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\tcondition_address,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t);","highlight_start":1,"highlight_end":7},{"text":"\t\t\t} else if transaction.appState.state == 1 {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tlet new_access_condition = AccessConditionOf::<T> {","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\tnonce: access_condition.nonce,","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\tplayers: access_condition.players.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t\tseqNum: transaction.seqNum,","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tstatus: AppStatus::IDLE,","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\towner: access_condition.owner.clone(),","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\t\tgrantee: access_condition.grantee.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t<AccessConditionList<T>>::mutate(&condition_address, |new| *new = Some(new_access_condition.clone()));","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::SetIdle(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\tcondition_address,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t} else {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tlet did = match Self::did_list(transaction.appStete.state) {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t\tSome(_did) => _did,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tNone => return Err(Error::<T>::InvalidState.into())","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet new_access_condition = AccessConditionOf::<T> {","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\tnonce: access_condition.nonce,","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\tplayers: access_condition.players.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t\tseqNum: transaction.seqNum,","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tstatus: AppStatus::FINALIZED,","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\towner: access_condition.owner.clone(),","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\t\tgrantee: access_condition.grantee.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t<AccessConditionAddressList<T>>::mutate(&condition_address, |new| *new = Some(new_access_condition.clone()));","highlight_start":1,"highlight_end":114},{"text":"\t\t\t\t<DocumentPermissionsState<T>>::mutate((&did, &access_condition.grantee), true);","highlight_start":1,"highlight_end":84},{"text":"\t\t\t\t<FinalizedOf<T>>::mutate(&condition_address, true);","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t<OutcomeOf<T>>::mutate(&condition_address, true);","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::IntendSettle(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\tcondition_address,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t);","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getStatus(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":80},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet status = access_condition.status;","highlight_start":1,"highlight_end":41},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tif status == AppStatus::IDLE {","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::IdleStatus(","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\tcondition_address, ","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t));","highlight_start":1,"highlight_end":8},{"text":"\t\t\t} else {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::FinalizedStatus(","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\t\tcondition_address,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t);","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getSeqNum(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":80},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet seq = access_condition.seqNum;","highlight_start":1,"highlight_end":38},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::SeqNum(","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\tseq,","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getOwner(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":79},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet owner = access_condition.owner;","highlight_start":1,"highlight_end":39},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::Owner(","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\towner,","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getGrantee(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":81},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet grantee = access_condition.grantee;","highlight_start":1,"highlight_end":43},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::Grantee(","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tgrantee,","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t","highlight_start":1,"highlight_end":3},{"text":"\t\t//pub fn isFinalized() {}","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t//pub fn getOutcome() {}","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t//pub fn checkPermissions() {}","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn setNewDID(origin, did: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":66},{"text":"\t\t\tlet who = ensure_signed(origin)?;","highlight_start":1,"highlight_end":37},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet isOwner: bool = <did::Module<T>>::boolean_owner(&did, &who);","highlight_start":1,"highlight_end":68},{"text":"\t\t\tensure!(isOwner == true, Error::<T>::NotOwner);","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet mut didKey: u32 = |_didKey| {","highlight_start":1,"highlight_end":37},{"text":"\t\t\t\tlet mut _didKey = Self::did_key();","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\tif _didKey == 0 || _didKey == 1 {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t\t\t_didKey = 2;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t_didKey","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t} else {","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\t_didKey","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t<DIDList<T>>::insert(didKey, &did);","highlight_start":1,"highlight_end":39},{"text":"\t\t\t<KeyOfDID<T>>::insert(&did, didKey);","highlight_start":1,"highlight_end":40},{"text":"\t\t\t<DIDKey>::mutate(|key| *key += 1);","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::NewDID(","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\tdid,","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\tdidKey","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getDIDKey(origin, did: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":66},{"text":"\t\t\tlet who = ensure_signed(origin)?;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet key = match Self::key_of_did(&did) {","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\tSome(_key) => _key,","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tNone => return Err(Error::<T>::NotExist.into())","highlight_start":1,"highlight_end":52},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::DIDKey(","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\tkey","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getDID(origin, key: u32) -> DispatchResult {","highlight_start":1,"highlight_end":54},{"text":"\t\t\tlet who = ensure_signed(origin)?;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet did = match Self::did_list(key) {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tSome(_did) => _did,","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tNone => return Err(Error::<T>::NotExist.into())","highlight_start":1,"highlight_end":52},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::DID(","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tdid","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `BlockNumber` in bounds of `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:89:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdecl_module! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct Module<T: Trait> for enum Call where origin: T::Origin {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        type Error = Error<T>;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m381\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m382\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `BlockNumber`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"ambiguous associated type `BlockNumber` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":26017,"byte_end":26028,"line_start":516,"line_end":516,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":41,"highlight_end":52}],"label":"ambiguous associated type `BlockNumber`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":35680,"byte_end":35900,"line_start":726,"line_end":731,"column_start":7,"column_end":6,"is_primary":false,"text":[{"text":"    } $ crate :: decl_module !","highlight_start":7,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":19701,"byte_end":20183,"line_start":375,"line_end":383,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":13890,"byte_end":14624,"line_start":265,"line_end":277,"column_start":5,"column_end":21,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":15428,"byte_end":16172,"line_start":293,"line_end":305,"column_start":5,"column_end":54,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":2016,"byte_end":2531,"line_start":41,"line_end":49,"column_start":5,"column_end":19,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":11524,"byte_end":12026,"line_start":222,"line_end":230,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":330,"byte_end":682,"line_start":7,"line_end":13,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":2672,"byte_end":10492,"line_start":89,"line_end":382,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"decl_module! {","highlight_start":1,"highlight_end":15},{"text":"\tpub struct Module<T: Trait> for enum Call where origin: T::Origin {","highlight_start":1,"highlight_end":69},{"text":"\t\ttype Error = Error<T>;","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tfn deposit_event() = default;","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn createAccessCondition(","highlight_start":1,"highlight_end":32},{"text":"\t\t\torigin,","highlight_start":1,"highlight_end":11},{"text":"\t\t\tplayers: Vec<T::AccountId>, ","highlight_start":1,"highlight_end":32},{"text":"\t\t\tnonce: u32,","highlight_start":1,"highlight_end":15},{"text":"\t\t\tdid: T::AccountId,","highlight_start":1,"highlight_end":22},{"text":"\t\t) -> DispatchResult {","highlight_start":1,"highlight_end":24},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tensure!(players.len() == 2, Error::<T>::InvalidPlayerLength);","highlight_start":1,"highlight_end":65},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet isPlayer1: bool = <did::Module<T>>::boolean_owner(&did, &players[0]);","highlight_start":1,"highlight_end":77},{"text":"\t\t\tlet isPlayer2: bool = <did::Module<T>>::boolean_owner(&did, &players[1]);","highlight_start":1,"highlight_end":77},{"text":"\t\t\tensure!(isPlayer1 == true || isPlayer2 == true, Error::<T>::NotOwner);","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// Create new Address of Access Condition","highlight_start":1,"highlight_end":45},{"text":"\t\t\tlet condition_address = Self::create_condition_address();","highlight_start":1,"highlight_end":61},{"text":"\t\t","highlight_start":1,"highlight_end":3},{"text":"\t\t\t// TODO: Refactoring and default <DIDKey> is 2.","highlight_start":1,"highlight_end":51},{"text":"\t\t\tlet mut didKey: u32 = |_didKey| {","highlight_start":1,"highlight_end":37},{"text":"\t\t\t\tlet mut _didKey = Self::did_key();","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\tif _didKey == 0 || _didKey == 1 {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t\t\t_didKey = 2;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t_didKey","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t} else {","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\t_didKey","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t<DIDList<T>>::insert(didKey, &did);","highlight_start":1,"highlight_end":39},{"text":"\t\t\t<KeyOfDID<T>>::insert(&did, didKey);","highlight_start":1,"highlight_end":40},{"text":"\t\t\t<DIDKey>::mutate(|key| *key += 1);","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tif isPlayer1 == true {","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tSelf::set_access_condition(condition_address, nonce, players[0], players[1], did)?;","highlight_start":1,"highlight_end":88},{"text":"\t\t\t} else {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tSelf::set_access_condition(condition_address, nonce, players[1], players[0], did)?;","highlight_start":1,"highlight_end":88},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn intendSettle(","highlight_start":1,"highlight_end":23},{"text":"\t\t\torigin, ","highlight_start":1,"highlight_end":12},{"text":"\t\t\tcondition_address: T::AccountId,","highlight_start":1,"highlight_end":36},{"text":"\t\t\ttransaction: StateProof<T::Signature>,","highlight_start":1,"highlight_end":42},{"text":"\t\t) -> DispatchResult {","highlight_start":1,"highlight_end":24},{"text":"\t\t\tlet who = ensure_signed(origin)?;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet players: Vec<T::AccountId> = access_condition.players;","highlight_start":1,"highlight_end":62},{"text":"\t\t\tensure!(&who == &players[0] || &who == &players[1], Error::<T>::InvalidSender);","highlight_start":1,"highlight_end":83},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet mut encoded = transaction.appState.nonce.encode();","highlight_start":1,"highlight_end":58},{"text":"\t\t\tencoded.extend(transaction.appState.seqNum.encode());","highlight_start":1,"highlight_end":57},{"text":"\t\t\tencoded.extend(transaction.appState.state.encode());","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tSelf::valid_signers(transaction.sigs, encoded, players)?;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tensure!(access_condition.nonce == transaction.appState.nonce, Error::<T>::InvalidNonce);","highlight_start":1,"highlight_end":92},{"text":"\t\t\tensure!(access_condition.seqNum < transaction.appState.seqNum, Error::<T>::InvalidSeqNum);","highlight_start":1,"highlight_end":94},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tif transaction.appState.state == 0 {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tlet new_access_condition = AccessConditionOf::<T> {","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\tnonce: access_condition.nonce,","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\tplayers: access_condition.players.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t\tseqNum: transaction.seqNum,","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tstatus: AppStatus::IDLE,","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\towner: access_condition.grantee.clone(),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\tgrantee: access_condition.owner.clone(),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t<AccessConditionList<T>>::mutate(&condition_address, |new| *new = Some(new_access_condition.clone()));","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::SwapPosition(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\tcondition_address,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t);","highlight_start":1,"highlight_end":7},{"text":"\t\t\t} else if transaction.appState.state == 1 {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tlet new_access_condition = AccessConditionOf::<T> {","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\tnonce: access_condition.nonce,","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\tplayers: access_condition.players.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t\tseqNum: transaction.seqNum,","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tstatus: AppStatus::IDLE,","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\towner: access_condition.owner.clone(),","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\t\tgrantee: access_condition.grantee.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t<AccessConditionList<T>>::mutate(&condition_address, |new| *new = Some(new_access_condition.clone()));","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::SetIdle(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\tcondition_address,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t} else {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tlet did = match Self::did_list(transaction.appStete.state) {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t\tSome(_did) => _did,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tNone => return Err(Error::<T>::InvalidState.into())","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet new_access_condition = AccessConditionOf::<T> {","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\tnonce: access_condition.nonce,","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\tplayers: access_condition.players.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t\tseqNum: transaction.seqNum,","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tstatus: AppStatus::FINALIZED,","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\towner: access_condition.owner.clone(),","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\t\tgrantee: access_condition.grantee.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t<AccessConditionAddressList<T>>::mutate(&condition_address, |new| *new = Some(new_access_condition.clone()));","highlight_start":1,"highlight_end":114},{"text":"\t\t\t\t<DocumentPermissionsState<T>>::mutate((&did, &access_condition.grantee), true);","highlight_start":1,"highlight_end":84},{"text":"\t\t\t\t<FinalizedOf<T>>::mutate(&condition_address, true);","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t<OutcomeOf<T>>::mutate(&condition_address, true);","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::IntendSettle(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\tcondition_address,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t);","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getStatus(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":80},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet status = access_condition.status;","highlight_start":1,"highlight_end":41},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tif status == AppStatus::IDLE {","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::IdleStatus(","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\tcondition_address, ","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t));","highlight_start":1,"highlight_end":8},{"text":"\t\t\t} else {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::FinalizedStatus(","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\t\tcondition_address,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t);","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getSeqNum(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":80},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet seq = access_condition.seqNum;","highlight_start":1,"highlight_end":38},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::SeqNum(","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\tseq,","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getOwner(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":79},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet owner = access_condition.owner;","highlight_start":1,"highlight_end":39},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::Owner(","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\towner,","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getGrantee(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":81},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet grantee = access_condition.grantee;","highlight_start":1,"highlight_end":43},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::Grantee(","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tgrantee,","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t","highlight_start":1,"highlight_end":3},{"text":"\t\t//pub fn isFinalized() {}","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t//pub fn getOutcome() {}","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t//pub fn checkPermissions() {}","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn setNewDID(origin, did: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":66},{"text":"\t\t\tlet who = ensure_signed(origin)?;","highlight_start":1,"highlight_end":37},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet isOwner: bool = <did::Module<T>>::boolean_owner(&did, &who);","highlight_start":1,"highlight_end":68},{"text":"\t\t\tensure!(isOwner == true, Error::<T>::NotOwner);","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet mut didKey: u32 = |_didKey| {","highlight_start":1,"highlight_end":37},{"text":"\t\t\t\tlet mut _didKey = Self::did_key();","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\tif _didKey == 0 || _didKey == 1 {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t\t\t_didKey = 2;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t_didKey","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t} else {","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\t_didKey","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t<DIDList<T>>::insert(didKey, &did);","highlight_start":1,"highlight_end":39},{"text":"\t\t\t<KeyOfDID<T>>::insert(&did, didKey);","highlight_start":1,"highlight_end":40},{"text":"\t\t\t<DIDKey>::mutate(|key| *key += 1);","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::NewDID(","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\tdid,","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\tdidKey","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getDIDKey(origin, did: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":66},{"text":"\t\t\tlet who = ensure_signed(origin)?;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet key = match Self::key_of_did(&did) {","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\tSome(_key) => _key,","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tNone => return Err(Error::<T>::NotExist.into())","highlight_start":1,"highlight_end":52},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::DIDKey(","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\tkey","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getDID(origin, key: u32) -> DispatchResult {","highlight_start":1,"highlight_end":54},{"text":"\t\t\tlet who = ensure_signed(origin)?;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet did = match Self::did_list(key) {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tSome(_did) => _did,","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tNone => return Err(Error::<T>::NotExist.into())","highlight_start":1,"highlight_end":52},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::DID(","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tdid","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `BlockNumber` in bounds of `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:89:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdecl_module! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct Module<T: Trait> for enum Call where origin: T::Origin {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        type Error = Error<T>;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m381\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m382\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `BlockNumber`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"ambiguous associated type `BlockNumber` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":26810,"byte_end":26821,"line_start":531,"line_end":531,"column_start":27,"column_end":38,"is_primary":true,"text":[{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":27,"highlight_end":38}],"label":"ambiguous associated type `BlockNumber`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":35901,"byte_end":36171,"line_start":731,"line_end":737,"column_start":7,"column_end":6,"is_primary":false,"text":[{"text":"    } $ crate :: decl_module !","highlight_start":7,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":19701,"byte_end":20183,"line_start":375,"line_end":383,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":13890,"byte_end":14624,"line_start":265,"line_end":277,"column_start":5,"column_end":21,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":15428,"byte_end":16172,"line_start":293,"line_end":305,"column_start":5,"column_end":54,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":2016,"byte_end":2531,"line_start":41,"line_end":49,"column_start":5,"column_end":19,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":11524,"byte_end":12026,"line_start":222,"line_end":230,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":330,"byte_end":682,"line_start":7,"line_end":13,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":2672,"byte_end":10492,"line_start":89,"line_end":382,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"decl_module! {","highlight_start":1,"highlight_end":15},{"text":"\tpub struct Module<T: Trait> for enum Call where origin: T::Origin {","highlight_start":1,"highlight_end":69},{"text":"\t\ttype Error = Error<T>;","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tfn deposit_event() = default;","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn createAccessCondition(","highlight_start":1,"highlight_end":32},{"text":"\t\t\torigin,","highlight_start":1,"highlight_end":11},{"text":"\t\t\tplayers: Vec<T::AccountId>, ","highlight_start":1,"highlight_end":32},{"text":"\t\t\tnonce: u32,","highlight_start":1,"highlight_end":15},{"text":"\t\t\tdid: T::AccountId,","highlight_start":1,"highlight_end":22},{"text":"\t\t) -> DispatchResult {","highlight_start":1,"highlight_end":24},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tensure!(players.len() == 2, Error::<T>::InvalidPlayerLength);","highlight_start":1,"highlight_end":65},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet isPlayer1: bool = <did::Module<T>>::boolean_owner(&did, &players[0]);","highlight_start":1,"highlight_end":77},{"text":"\t\t\tlet isPlayer2: bool = <did::Module<T>>::boolean_owner(&did, &players[1]);","highlight_start":1,"highlight_end":77},{"text":"\t\t\tensure!(isPlayer1 == true || isPlayer2 == true, Error::<T>::NotOwner);","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// Create new Address of Access Condition","highlight_start":1,"highlight_end":45},{"text":"\t\t\tlet condition_address = Self::create_condition_address();","highlight_start":1,"highlight_end":61},{"text":"\t\t","highlight_start":1,"highlight_end":3},{"text":"\t\t\t// TODO: Refactoring and default <DIDKey> is 2.","highlight_start":1,"highlight_end":51},{"text":"\t\t\tlet mut didKey: u32 = |_didKey| {","highlight_start":1,"highlight_end":37},{"text":"\t\t\t\tlet mut _didKey = Self::did_key();","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\tif _didKey == 0 || _didKey == 1 {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t\t\t_didKey = 2;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t_didKey","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t} else {","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\t_didKey","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t<DIDList<T>>::insert(didKey, &did);","highlight_start":1,"highlight_end":39},{"text":"\t\t\t<KeyOfDID<T>>::insert(&did, didKey);","highlight_start":1,"highlight_end":40},{"text":"\t\t\t<DIDKey>::mutate(|key| *key += 1);","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tif isPlayer1 == true {","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tSelf::set_access_condition(condition_address, nonce, players[0], players[1], did)?;","highlight_start":1,"highlight_end":88},{"text":"\t\t\t} else {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tSelf::set_access_condition(condition_address, nonce, players[1], players[0], did)?;","highlight_start":1,"highlight_end":88},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn intendSettle(","highlight_start":1,"highlight_end":23},{"text":"\t\t\torigin, ","highlight_start":1,"highlight_end":12},{"text":"\t\t\tcondition_address: T::AccountId,","highlight_start":1,"highlight_end":36},{"text":"\t\t\ttransaction: StateProof<T::Signature>,","highlight_start":1,"highlight_end":42},{"text":"\t\t) -> DispatchResult {","highlight_start":1,"highlight_end":24},{"text":"\t\t\tlet who = ensure_signed(origin)?;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet players: Vec<T::AccountId> = access_condition.players;","highlight_start":1,"highlight_end":62},{"text":"\t\t\tensure!(&who == &players[0] || &who == &players[1], Error::<T>::InvalidSender);","highlight_start":1,"highlight_end":83},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet mut encoded = transaction.appState.nonce.encode();","highlight_start":1,"highlight_end":58},{"text":"\t\t\tencoded.extend(transaction.appState.seqNum.encode());","highlight_start":1,"highlight_end":57},{"text":"\t\t\tencoded.extend(transaction.appState.state.encode());","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tSelf::valid_signers(transaction.sigs, encoded, players)?;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tensure!(access_condition.nonce == transaction.appState.nonce, Error::<T>::InvalidNonce);","highlight_start":1,"highlight_end":92},{"text":"\t\t\tensure!(access_condition.seqNum < transaction.appState.seqNum, Error::<T>::InvalidSeqNum);","highlight_start":1,"highlight_end":94},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tif transaction.appState.state == 0 {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tlet new_access_condition = AccessConditionOf::<T> {","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\tnonce: access_condition.nonce,","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\tplayers: access_condition.players.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t\tseqNum: transaction.seqNum,","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tstatus: AppStatus::IDLE,","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\towner: access_condition.grantee.clone(),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\tgrantee: access_condition.owner.clone(),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t<AccessConditionList<T>>::mutate(&condition_address, |new| *new = Some(new_access_condition.clone()));","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::SwapPosition(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\tcondition_address,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t);","highlight_start":1,"highlight_end":7},{"text":"\t\t\t} else if transaction.appState.state == 1 {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tlet new_access_condition = AccessConditionOf::<T> {","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\tnonce: access_condition.nonce,","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\tplayers: access_condition.players.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t\tseqNum: transaction.seqNum,","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tstatus: AppStatus::IDLE,","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\towner: access_condition.owner.clone(),","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\t\tgrantee: access_condition.grantee.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t<AccessConditionList<T>>::mutate(&condition_address, |new| *new = Some(new_access_condition.clone()));","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::SetIdle(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\tcondition_address,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t} else {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tlet did = match Self::did_list(transaction.appStete.state) {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t\tSome(_did) => _did,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tNone => return Err(Error::<T>::InvalidState.into())","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet new_access_condition = AccessConditionOf::<T> {","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\tnonce: access_condition.nonce,","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\tplayers: access_condition.players.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t\tseqNum: transaction.seqNum,","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tstatus: AppStatus::FINALIZED,","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\towner: access_condition.owner.clone(),","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\t\tgrantee: access_condition.grantee.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t<AccessConditionAddressList<T>>::mutate(&condition_address, |new| *new = Some(new_access_condition.clone()));","highlight_start":1,"highlight_end":114},{"text":"\t\t\t\t<DocumentPermissionsState<T>>::mutate((&did, &access_condition.grantee), true);","highlight_start":1,"highlight_end":84},{"text":"\t\t\t\t<FinalizedOf<T>>::mutate(&condition_address, true);","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t<OutcomeOf<T>>::mutate(&condition_address, true);","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::IntendSettle(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\tcondition_address,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t);","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getStatus(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":80},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet status = access_condition.status;","highlight_start":1,"highlight_end":41},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tif status == AppStatus::IDLE {","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::IdleStatus(","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\tcondition_address, ","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t));","highlight_start":1,"highlight_end":8},{"text":"\t\t\t} else {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::FinalizedStatus(","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\t\tcondition_address,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t);","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getSeqNum(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":80},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet seq = access_condition.seqNum;","highlight_start":1,"highlight_end":38},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::SeqNum(","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\tseq,","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getOwner(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":79},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet owner = access_condition.owner;","highlight_start":1,"highlight_end":39},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::Owner(","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\towner,","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getGrantee(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":81},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet grantee = access_condition.grantee;","highlight_start":1,"highlight_end":43},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::Grantee(","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tgrantee,","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t","highlight_start":1,"highlight_end":3},{"text":"\t\t//pub fn isFinalized() {}","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t//pub fn getOutcome() {}","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t//pub fn checkPermissions() {}","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn setNewDID(origin, did: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":66},{"text":"\t\t\tlet who = ensure_signed(origin)?;","highlight_start":1,"highlight_end":37},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet isOwner: bool = <did::Module<T>>::boolean_owner(&did, &who);","highlight_start":1,"highlight_end":68},{"text":"\t\t\tensure!(isOwner == true, Error::<T>::NotOwner);","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet mut didKey: u32 = |_didKey| {","highlight_start":1,"highlight_end":37},{"text":"\t\t\t\tlet mut _didKey = Self::did_key();","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\tif _didKey == 0 || _didKey == 1 {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t\t\t_didKey = 2;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t_didKey","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t} else {","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\t_didKey","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t<DIDList<T>>::insert(didKey, &did);","highlight_start":1,"highlight_end":39},{"text":"\t\t\t<KeyOfDID<T>>::insert(&did, didKey);","highlight_start":1,"highlight_end":40},{"text":"\t\t\t<DIDKey>::mutate(|key| *key += 1);","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::NewDID(","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\tdid,","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\tdidKey","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getDIDKey(origin, did: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":66},{"text":"\t\t\tlet who = ensure_signed(origin)?;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet key = match Self::key_of_did(&did) {","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\tSome(_key) => _key,","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tNone => return Err(Error::<T>::NotExist.into())","highlight_start":1,"highlight_end":52},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::DIDKey(","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\tkey","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getDID(origin, key: u32) -> DispatchResult {","highlight_start":1,"highlight_end":54},{"text":"\t\t\tlet who = ensure_signed(origin)?;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet did = match Self::did_list(key) {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tSome(_did) => _did,","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tNone => return Err(Error::<T>::NotExist.into())","highlight_start":1,"highlight_end":52},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::DID(","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tdid","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `BlockNumber` in bounds of `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:89:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdecl_module! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct Module<T: Trait> for enum Call where origin: T::Origin {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        type Error = Error<T>;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m381\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m382\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `BlockNumber`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"ambiguous associated type `BlockNumber` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":29085,"byte_end":29096,"line_start":581,"line_end":581,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":45,"highlight_end":56}],"label":"ambiguous associated type `BlockNumber`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":36172,"byte_end":36386,"line_start":737,"line_end":742,"column_start":7,"column_end":6,"is_primary":false,"text":[{"text":"    } $ crate :: decl_module !","highlight_start":7,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":19701,"byte_end":20183,"line_start":375,"line_end":383,"column_start":5,"column_end":31,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":13890,"byte_end":14624,"line_start":265,"line_end":277,"column_start":5,"column_end":21,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":15428,"byte_end":16172,"line_start":293,"line_end":305,"column_start":5,"column_end":54,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":2016,"byte_end":2531,"line_start":41,"line_end":49,"column_start":5,"column_end":19,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":11524,"byte_end":12026,"line_start":222,"line_end":230,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":330,"byte_end":682,"line_start":7,"line_end":13,"column_start":5,"column_end":10,"is_primary":false,"text":[{"text":"    $ crate :: decl_module !","highlight_start":5,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":2672,"byte_end":10492,"line_start":89,"line_end":382,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"decl_module! {","highlight_start":1,"highlight_end":15},{"text":"\tpub struct Module<T: Trait> for enum Call where origin: T::Origin {","highlight_start":1,"highlight_end":69},{"text":"\t\ttype Error = Error<T>;","highlight_start":1,"highlight_end":25},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tfn deposit_event() = default;","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn createAccessCondition(","highlight_start":1,"highlight_end":32},{"text":"\t\t\torigin,","highlight_start":1,"highlight_end":11},{"text":"\t\t\tplayers: Vec<T::AccountId>, ","highlight_start":1,"highlight_end":32},{"text":"\t\t\tnonce: u32,","highlight_start":1,"highlight_end":15},{"text":"\t\t\tdid: T::AccountId,","highlight_start":1,"highlight_end":22},{"text":"\t\t) -> DispatchResult {","highlight_start":1,"highlight_end":24},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tensure!(players.len() == 2, Error::<T>::InvalidPlayerLength);","highlight_start":1,"highlight_end":65},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet isPlayer1: bool = <did::Module<T>>::boolean_owner(&did, &players[0]);","highlight_start":1,"highlight_end":77},{"text":"\t\t\tlet isPlayer2: bool = <did::Module<T>>::boolean_owner(&did, &players[1]);","highlight_start":1,"highlight_end":77},{"text":"\t\t\tensure!(isPlayer1 == true || isPlayer2 == true, Error::<T>::NotOwner);","highlight_start":1,"highlight_end":74},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t// Create new Address of Access Condition","highlight_start":1,"highlight_end":45},{"text":"\t\t\tlet condition_address = Self::create_condition_address();","highlight_start":1,"highlight_end":61},{"text":"\t\t","highlight_start":1,"highlight_end":3},{"text":"\t\t\t// TODO: Refactoring and default <DIDKey> is 2.","highlight_start":1,"highlight_end":51},{"text":"\t\t\tlet mut didKey: u32 = |_didKey| {","highlight_start":1,"highlight_end":37},{"text":"\t\t\t\tlet mut _didKey = Self::did_key();","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\tif _didKey == 0 || _didKey == 1 {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t\t\t_didKey = 2;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t_didKey","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t} else {","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\t_didKey","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t<DIDList<T>>::insert(didKey, &did);","highlight_start":1,"highlight_end":39},{"text":"\t\t\t<KeyOfDID<T>>::insert(&did, didKey);","highlight_start":1,"highlight_end":40},{"text":"\t\t\t<DIDKey>::mutate(|key| *key += 1);","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tif isPlayer1 == true {","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\tSelf::set_access_condition(condition_address, nonce, players[0], players[1], did)?;","highlight_start":1,"highlight_end":88},{"text":"\t\t\t} else {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tSelf::set_access_condition(condition_address, nonce, players[1], players[0], did)?;","highlight_start":1,"highlight_end":88},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn intendSettle(","highlight_start":1,"highlight_end":23},{"text":"\t\t\torigin, ","highlight_start":1,"highlight_end":12},{"text":"\t\t\tcondition_address: T::AccountId,","highlight_start":1,"highlight_end":36},{"text":"\t\t\ttransaction: StateProof<T::Signature>,","highlight_start":1,"highlight_end":42},{"text":"\t\t) -> DispatchResult {","highlight_start":1,"highlight_end":24},{"text":"\t\t\tlet who = ensure_signed(origin)?;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet players: Vec<T::AccountId> = access_condition.players;","highlight_start":1,"highlight_end":62},{"text":"\t\t\tensure!(&who == &players[0] || &who == &players[1], Error::<T>::InvalidSender);","highlight_start":1,"highlight_end":83},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet mut encoded = transaction.appState.nonce.encode();","highlight_start":1,"highlight_end":58},{"text":"\t\t\tencoded.extend(transaction.appState.seqNum.encode());","highlight_start":1,"highlight_end":57},{"text":"\t\t\tencoded.extend(transaction.appState.state.encode());","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tSelf::valid_signers(transaction.sigs, encoded, players)?;","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tensure!(access_condition.nonce == transaction.appState.nonce, Error::<T>::InvalidNonce);","highlight_start":1,"highlight_end":92},{"text":"\t\t\tensure!(access_condition.seqNum < transaction.appState.seqNum, Error::<T>::InvalidSeqNum);","highlight_start":1,"highlight_end":94},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tif transaction.appState.state == 0 {","highlight_start":1,"highlight_end":40},{"text":"\t\t\t\tlet new_access_condition = AccessConditionOf::<T> {","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\tnonce: access_condition.nonce,","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\tplayers: access_condition.players.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t\tseqNum: transaction.seqNum,","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tstatus: AppStatus::IDLE,","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\towner: access_condition.grantee.clone(),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t\tgrantee: access_condition.owner.clone(),","highlight_start":1,"highlight_end":46},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\t<AccessConditionList<T>>::mutate(&condition_address, |new| *new = Some(new_access_condition.clone()));","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::SwapPosition(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\tcondition_address,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t);","highlight_start":1,"highlight_end":7},{"text":"\t\t\t} else if transaction.appState.state == 1 {","highlight_start":1,"highlight_end":47},{"text":"\t\t\t\tlet new_access_condition = AccessConditionOf::<T> {","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\tnonce: access_condition.nonce,","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\tplayers: access_condition.players.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t\tseqNum: transaction.seqNum,","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tstatus: AppStatus::IDLE,","highlight_start":1,"highlight_end":30},{"text":"\t\t\t\t\towner: access_condition.owner.clone(),","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\t\tgrantee: access_condition.grantee.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t<AccessConditionList<T>>::mutate(&condition_address, |new| *new = Some(new_access_condition.clone()));","highlight_start":1,"highlight_end":107},{"text":"\t\t\t\t","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::SetIdle(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\t\t\tcondition_address,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t} else {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tlet did = match Self::did_list(transaction.appStete.state) {","highlight_start":1,"highlight_end":65},{"text":"\t\t\t\t\tSome(_did) => _did,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tNone => return Err(Error::<T>::InvalidState.into())","highlight_start":1,"highlight_end":57},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\tlet new_access_condition = AccessConditionOf::<T> {","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t\tnonce: access_condition.nonce,","highlight_start":1,"highlight_end":36},{"text":"\t\t\t\t\tplayers: access_condition.players.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t\tseqNum: transaction.seqNum,","highlight_start":1,"highlight_end":33},{"text":"\t\t\t\t\tstatus: AppStatus::FINALIZED,","highlight_start":1,"highlight_end":35},{"text":"\t\t\t\t\towner: access_condition.owner.clone(),","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\t\tgrantee: access_condition.grantee.clone(),","highlight_start":1,"highlight_end":48},{"text":"\t\t\t\t};","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\t\t<AccessConditionAddressList<T>>::mutate(&condition_address, |new| *new = Some(new_access_condition.clone()));","highlight_start":1,"highlight_end":114},{"text":"\t\t\t\t<DocumentPermissionsState<T>>::mutate((&did, &access_condition.grantee), true);","highlight_start":1,"highlight_end":84},{"text":"\t\t\t\t<FinalizedOf<T>>::mutate(&condition_address, true);","highlight_start":1,"highlight_end":56},{"text":"\t\t\t\t<OutcomeOf<T>>::mutate(&condition_address, true);","highlight_start":1,"highlight_end":54},{"text":"\t\t\t\t","highlight_start":1,"highlight_end":5},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::IntendSettle(","highlight_start":1,"highlight_end":29},{"text":"\t\t\t\t\t\tcondition_address,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t);","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getStatus(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":80},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet status = access_condition.status;","highlight_start":1,"highlight_end":41},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tif status == AppStatus::IDLE {","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::IdleStatus(","highlight_start":1,"highlight_end":27},{"text":"\t\t\t\t\t\tcondition_address, ","highlight_start":1,"highlight_end":26},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t));","highlight_start":1,"highlight_end":8},{"text":"\t\t\t} else {","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\tRawEvent::FinalizedStatus(","highlight_start":1,"highlight_end":32},{"text":"\t\t\t\t\t\tcondition_address,","highlight_start":1,"highlight_end":25},{"text":"\t\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":43},{"text":"\t\t\t\t\t)","highlight_start":1,"highlight_end":7},{"text":"\t\t\t\t);","highlight_start":1,"highlight_end":7},{"text":"\t\t\t}","highlight_start":1,"highlight_end":5},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getSeqNum(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":80},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet seq = access_condition.seqNum;","highlight_start":1,"highlight_end":38},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::SeqNum(","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\tseq,","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getOwner(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":79},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet owner = access_condition.owner;","highlight_start":1,"highlight_end":39},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::Owner(","highlight_start":1,"highlight_end":21},{"text":"\t\t\t\t\towner,","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getGrantee(origin, condition_address: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":81},{"text":"\t\t\tlet _ = ensure_signed(origin)?;","highlight_start":1,"highlight_end":35},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet access_condition = match Self::condition_list(&condition_address) {","highlight_start":1,"highlight_end":75},{"text":"\t\t\t\tSome(_condtion) => _condtion,","highlight_start":1,"highlight_end":34},{"text":"\t\t\t\tNone => return Err(Error::<T>::InvalidConditionAddress.into())","highlight_start":1,"highlight_end":67},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet grantee = access_condition.grantee;","highlight_start":1,"highlight_end":43},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::Grantee(","highlight_start":1,"highlight_end":23},{"text":"\t\t\t\t\tgrantee,","highlight_start":1,"highlight_end":14},{"text":"\t\t\t\t\t<system::Module<T>>::block_number(),","highlight_start":1,"highlight_end":42},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t","highlight_start":1,"highlight_end":3},{"text":"\t\t//pub fn isFinalized() {}","highlight_start":1,"highlight_end":28},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t//pub fn getOutcome() {}","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t//pub fn checkPermissions() {}","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn setNewDID(origin, did: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":66},{"text":"\t\t\tlet who = ensure_signed(origin)?;","highlight_start":1,"highlight_end":37},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tlet isOwner: bool = <did::Module<T>>::boolean_owner(&did, &who);","highlight_start":1,"highlight_end":68},{"text":"\t\t\tensure!(isOwner == true, Error::<T>::NotOwner);","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet mut didKey: u32 = |_didKey| {","highlight_start":1,"highlight_end":37},{"text":"\t\t\t\tlet mut _didKey = Self::did_key();","highlight_start":1,"highlight_end":39},{"text":"\t\t\t\tif _didKey == 0 || _didKey == 1 {","highlight_start":1,"highlight_end":38},{"text":"\t\t\t\t\t_didKey = 2;","highlight_start":1,"highlight_end":18},{"text":"\t\t\t\t\t_didKey","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t} else {","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t\t_didKey","highlight_start":1,"highlight_end":13},{"text":"\t\t\t\t}","highlight_start":1,"highlight_end":6},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t<DIDList<T>>::insert(didKey, &did);","highlight_start":1,"highlight_end":39},{"text":"\t\t\t<KeyOfDID<T>>::insert(&did, didKey);","highlight_start":1,"highlight_end":40},{"text":"\t\t\t<DIDKey>::mutate(|key| *key += 1);","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::NewDID(","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\tdid,","highlight_start":1,"highlight_end":10},{"text":"\t\t\t\t\tdidKey","highlight_start":1,"highlight_end":12},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getDIDKey(origin, did: T::AccountId) -> DispatchResult {","highlight_start":1,"highlight_end":66},{"text":"\t\t\tlet who = ensure_signed(origin)?;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet key = match Self::key_of_did(&did) {","highlight_start":1,"highlight_end":44},{"text":"\t\t\t\tSome(_key) => _key,","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tNone => return Err(Error::<T>::NotExist.into())","highlight_start":1,"highlight_end":52},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::DIDKey(","highlight_start":1,"highlight_end":22},{"text":"\t\t\t\t\tkey","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\tpub fn getDID(origin, key: u32) -> DispatchResult {","highlight_start":1,"highlight_end":54},{"text":"\t\t\tlet who = ensure_signed(origin)?;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tlet did = match Self::did_list(key) {","highlight_start":1,"highlight_end":41},{"text":"\t\t\t\tSome(_did) => _did,","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tNone => return Err(Error::<T>::NotExist.into())","highlight_start":1,"highlight_end":52},{"text":"\t\t\t};","highlight_start":1,"highlight_end":6},{"text":"\t\t\t","highlight_start":1,"highlight_end":4},{"text":"\t\t\tSelf::deposit_event(","highlight_start":1,"highlight_end":24},{"text":"\t\t\t\tRawEvent::DID(","highlight_start":1,"highlight_end":19},{"text":"\t\t\t\t\tdid","highlight_start":1,"highlight_end":9},{"text":"\t\t\t\t)","highlight_start":1,"highlight_end":6},{"text":"\t\t\t);","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"\t\t\tOk(())","highlight_start":1,"highlight_end":10},{"text":"\t\t}","highlight_start":1,"highlight_end":4},{"text":"\t}","highlight_start":1,"highlight_end":3},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::decl_module!","def_site_span":{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":0,"byte_end":44897,"line_start":1,"line_end":935,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty $","highlight_start":1,"highlight_end":68},{"text":" (, $ where_ty : ty : $ where_bound : path) * { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":69},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = system","highlight_start":1,"highlight_end":68},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"($ (# [$ attr : meta]) * pub struct $ mod_type : ident < $ trait_instance :","highlight_start":1,"highlight_end":76},{"text":" ident : $ trait_name : ident $","highlight_start":1,"highlight_end":32},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident $ (, $ where_ty : ty : $ where_bound : path) *","highlight_start":1,"highlight_end":63},{"text":" { $ ($ t : tt) * }) =>","highlight_start":1,"highlight_end":24},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ where_ty : $ where_bound), * } { } { } { } { } { } { } [] $ ($ t)","highlight_start":1,"highlight_end":78},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event () = default ; $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ vis fn deposit_event () = default ; }","highlight_start":1,"highlight_end":78},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * } { }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ vis : vis fn deposit_event $ ($ rest : tt) *)","highlight_start":1,"highlight_end":79},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"`deposit_event` function is reserved and must follow the syntax: `$vis:vis fn deposit_event() = default;`\")","highlight_start":1,"highlight_end":114},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_finalize","highlight_start":1,"highlight_end":46},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_finalize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":70},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * } { }","highlight_start":1,"highlight_end":67},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_finalize","highlight_start":1,"highlight_end":75},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":31},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_finalize ($ ($ param_name : $ param), *)","highlight_start":1,"highlight_end":78},{"text":"         { $ ($ impl) * }","highlight_start":1,"highlight_end":26},{"text":"     } { $ ($ offchain) * } { $ ($ constants) * } { $ ($ error_type) * }","highlight_start":1,"highlight_end":73},{"text":"     [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":45},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn on_initialize","highlight_start":1,"highlight_end":48},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ crate :: dispatch :: SimpleDispatchInfo :: zero ()] fn","highlight_start":1,"highlight_end":78},{"text":"         on_initialize ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":72},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":65},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] fn on_initialize","highlight_start":1,"highlight_end":77},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         # [weight = $ weight] fn on_initialize","highlight_start":1,"highlight_end":48},{"text":"         ($ ($ param_name : $ param), *) { $ ($ impl) * }","highlight_start":1,"highlight_end":58},{"text":"     } { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":74},{"text":"     { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":68},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * fn offchain_worker","highlight_start":1,"highlight_end":50},{"text":" ($ ($ param_name : ident : $ param : ty), * $ (,) ?) { $ ($ impl : tt) * } $","highlight_start":1,"highlight_end":78},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * }","highlight_start":1,"highlight_end":55},{"text":"     { fn offchain_worker ($ ($ param_name : $ param), *) { $ ($ impl) * } }","highlight_start":1,"highlight_end":77},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     ($ rest) *) ;","highlight_start":1,"highlight_end":19},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * const $ name : ident : $ ty : ty = $ value :","highlight_start":1,"highlight_end":76},{"text":" expr ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":30},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     {","highlight_start":1,"highlight_end":7},{"text":"         $ ($ constants) * $ (# [doc = $ doc_attr]) * $ name : $ ty = $ value","highlight_start":1,"highlight_end":78},{"text":"         ;","highlight_start":1,"highlight_end":11},{"text":"     } { $ ($ error_type) * } [$ ($ dispatchables) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":70},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { }","highlight_start":1,"highlight_end":58},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * type Error = $","highlight_start":1,"highlight_end":77},{"text":" error_type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type } [$ ($ dispatchables) *] $ ($ rest)","highlight_start":1,"highlight_end":79},{"text":"     *) ;","highlight_start":1,"highlight_end":10},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { } [$ ($ t : tt) *] $","highlight_start":1,"highlight_end":77},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { & 'static str } [$ ($ t) *] $ ($ rest) *) ;","highlight_start":1,"highlight_end":73},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty }","highlight_start":1,"highlight_end":76},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * #","highlight_start":1,"highlight_end":64},{"text":" [weight = $ weight : expr] $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":64},{"text":" ($ origin : ident $","highlight_start":1,"highlight_end":21},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ error_type }","highlight_start":1,"highlight_end":44},{"text":"     [$ ($ dispatchables) * $ (# [doc = $ doc_attr]) * # [weight = $ weight] $","highlight_start":1,"highlight_end":79},{"text":"      fn_vis fn $ fn_name","highlight_start":1,"highlight_end":26},{"text":"      ($ origin $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":73},{"text":"      (-> $ result) * { $ ($ impl) * } { $ ($ instance : $ instantiable) ? }]","highlight_start":1,"highlight_end":78},{"text":"     $ ($ rest) *) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":67},{"text":" ($ from : ident $","highlight_start":1,"highlight_end":19},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ normalize $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":79},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ?","highlight_start":1,"highlight_end":78},{"text":"     > for enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ other_where_bounds) * } { $ ($ deposit_event) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ on_initialize) * } { $ ($ on_finalize) * } { $ ($ offchain) * }","highlight_start":1,"highlight_end":76},{"text":"     { $ ($ constants) * } { $ ($ error_type) * } [$ ($ dispatchables) *] $","highlight_start":1,"highlight_end":76},{"text":"     (# [doc = $ doc_attr]) * #","highlight_start":1,"highlight_end":32},{"text":"     [weight = $ crate :: dispatch :: SimpleDispatchInfo :: default ()] $","highlight_start":1,"highlight_end":74},{"text":"     fn_vis fn $ fn_name","highlight_start":1,"highlight_end":25},{"text":"     ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) $","highlight_start":1,"highlight_end":70},{"text":"     (-> $ result) * { $ ($ impl) * } $ ($ rest) *) ;","highlight_start":1,"highlight_end":54},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" ($ origin : ident : T :: Origin $","highlight_start":1,"highlight_end":35},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *] $ (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":64},{"text":" (# [weight = $ weight : expr]) ? $ fn_vis : vis fn $ fn_name : ident","highlight_start":1,"highlight_end":70},{"text":" (origin : $ origin : ty $","highlight_start":1,"highlight_end":27},{"text":"  (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty) * $","highlight_start":1,"highlight_end":77},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"First parameter of dispatch should be marked `origin` only, with no type specified \\","highlight_start":1,"highlight_end":91},{"text":"\t\t\t(a bit like `self`).\")","highlight_start":1,"highlight_end":26},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":68},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * }","highlight_start":1,"highlight_end":54},{"text":" { $ ($ error_type : tt) * } [$ ($ dispatchables : tt) *] $","highlight_start":1,"highlight_end":60},{"text":" (# [doc = $ doc_attr : tt]) * $ (# [weight = $ weight : expr]) ? $ fn_vis :","highlight_start":1,"highlight_end":77},{"text":" vis fn $ fn_name : ident","highlight_start":1,"highlight_end":26},{"text":" ($ ($ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty), * $","highlight_start":1,"highlight_end":78},{"text":"  (,) ?) $ (-> $ result : ty) * { $ ($ impl : tt) * } $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":76},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    compile_error !","highlight_start":1,"highlight_end":20},{"text":"    (\"Implicit conversion to privileged function has been removed. \\","highlight_start":1,"highlight_end":69},{"text":"\t\t\tFirst parameter of dispatch should be marked `origin`. \\","highlight_start":1,"highlight_end":60},{"text":"\t\t\tFor root-matching dispatch, also add `ensure_root(origin)?`.\")","highlight_start":1,"highlight_end":66},{"text":"    ;","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ normalize $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":71},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, I : $ instantiable : path $ (= $ module_default_instance : path) ?) ?","highlight_start":1,"highlight_end":79},{"text":" > for enum $ call_type : ident where origin : $ origin_type : ty, system = $","highlight_start":1,"highlight_end":78},{"text":" system : ident { $ ($ other_where_bounds : tt) * }","highlight_start":1,"highlight_end":52},{"text":" { $ ($ deposit_event : tt) * } { $ ($ on_initialize : tt) * }","highlight_start":1,"highlight_end":63},{"text":" { $ ($ on_finalize : tt) * } { $ ($ offchain : tt) * }","highlight_start":1,"highlight_end":56},{"text":" { $ ($ constants : tt) * } { $ ($ error_type : tt) * }","highlight_start":1,"highlight_end":56},{"text":" [$ ($ dispatchables : tt) *]) =>","highlight_start":1,"highlight_end":34},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    (@ imp $ (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $","highlight_start":1,"highlight_end":73},{"text":"     trait_name $","highlight_start":1,"highlight_end":18},{"text":"     (< I >, I : $ instantiable $ (= $ module_default_instance) ?) ? > for","highlight_start":1,"highlight_end":75},{"text":"     enum $ call_type where origin : $ origin_type, system = $ system","highlight_start":1,"highlight_end":70},{"text":"     { $ ($ dispatchables) * } { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":62},{"text":"     { $ ($ deposit_event) * } { $ ($ on_initialize) * }","highlight_start":1,"highlight_end":57},{"text":"     { $ ($ on_finalize) * } { $ ($ offchain) * } { $ ($ constants) * }","highlight_start":1,"highlight_end":72},{"text":"     { $ ($ error_type) * }) ;","highlight_start":1,"highlight_end":31},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ call $ ignore : ident $ mod_type : ident < $ trait_instance : ident $","highlight_start":1,"highlight_end":73},{"text":" (, $ instance : ident) ? > $ fn_name : ident $ origin : ident $ system :","highlight_start":1,"highlight_end":74},{"text":" ident [$ ($ param_name : ident), *]) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    < $ mod_type < $ trait_instance $ (, $ instance) ? >> :: $ fn_name","highlight_start":1,"highlight_end":71},{"text":"    ($ origin $ (, $ param_name) *)","highlight_start":1,"highlight_end":36},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, I : $ instantiable : path) ? > ; $ system :","highlight_start":1,"highlight_end":74},{"text":" ident ; { $ ($ other_where_bounds : tt) * }) => { } ;","highlight_start":1,"highlight_end":55},{"text":"(@ impl_deposit_event $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; $ system : ident ; { $ ($ other_where_bounds : tt) * } $ vis : vis fn","highlight_start":1,"highlight_end":73},{"text":" deposit_event $","highlight_start":1,"highlight_end":17},{"text":" (< $ event_trait_instance : ident $ (, $ event_instance : ident) ? >) ? () =","highlight_start":1,"highlight_end":78},{"text":" default ;) =>","highlight_start":1,"highlight_end":15},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ module < $ trait_instance $","highlight_start":1,"highlight_end":75},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ vis fn deposit_event","highlight_start":1,"highlight_end":31},{"text":"        (event : impl Into << $ trait_instance as $ trait_name $","highlight_start":1,"highlight_end":65},{"text":"         (< $ instance >) ? > :: Event >)","highlight_start":1,"highlight_end":42},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ system :: Module < $ trait_instance >> :: deposit_event","highlight_start":1,"highlight_end":72},{"text":"            (event . into ())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":44},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize","highlight_start":1,"highlight_end":25},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":71},{"text":" on_initialize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":77},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_initialize ($ param : $ param_ty)","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_initialize\") ; let _enter =","highlight_start":1,"highlight_end":76},{"text":"                span . enter () ;","highlight_start":1,"highlight_end":34},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_initialize $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":70},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":43},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnInitialize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":73},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize () { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":42},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize","highlight_start":1,"highlight_end":23},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * } # [weight = $ weight : expr] fn","highlight_start":1,"highlight_end":69},{"text":" on_finalize ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":75},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn on_finalize ($ param : $ param_ty)","highlight_start":1,"highlight_end":46},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":55},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":70},{"text":"                (tracing :: Level :: DEBUG, \"on_finalize\") ; let _enter = span","highlight_start":1,"highlight_end":79},{"text":"                . enter () ;","highlight_start":1,"highlight_end":29},{"text":"            } { $ ($ impl) * }","highlight_start":1,"highlight_end":31},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_on_finalize $ module : ident < $ trait_instance : ident : $ trait_name","highlight_start":1,"highlight_end":79},{"text":" : ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":69},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OnFinalize < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":71},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_block_hooks_weight $ module : ident < $ trait_instance : ident : $","highlight_start":1,"highlight_end":75},{"text":" trait_name : ident $ (< I >, $ instance : ident : $ instantiable : path) ? >","highlight_start":1,"highlight_end":78},{"text":" ; { $ ($ other_where_bounds : tt) * } @ init $","highlight_start":1,"highlight_end":48},{"text":" (# [weight = $ weight_initialize : expr] fn on_initialize","highlight_start":1,"highlight_end":59},{"text":"  ($ ($ param_initialize : ident : $ param_ty_initialize : ty) *)","highlight_start":1,"highlight_end":66},{"text":"  { $ ($ impl_initialize : tt) * }) ? @ fin $","highlight_start":1,"highlight_end":46},{"text":" (# [weight = $ weight_finalize : expr] fn on_finalize","highlight_start":1,"highlight_end":55},{"text":"  ($ ($ param_finalize : ident : $ param_ty_finalize : ty) *)","highlight_start":1,"highlight_end":62},{"text":"  { $ ($ impl_finalize : tt) * }) ?) =>","highlight_start":1,"highlight_end":40},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: WeighBlock","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance :: BlockNumber > for $ module < $ trait_instance $","highlight_start":1,"highlight_end":74},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        (fn on_initialize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":78},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_initialize, n)","highlight_start":1,"highlight_end":69},{"text":"         }) ? $","highlight_start":1,"highlight_end":16},{"text":"        (fn on_finalize (n : $ trait_instance :: BlockNumber) -> $ crate ::","highlight_start":1,"highlight_end":76},{"text":"         dispatch :: Weight","highlight_start":1,"highlight_end":28},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             < dyn $ crate :: dispatch :: WeighData < $ trait_instance ::","highlight_start":1,"highlight_end":74},{"text":"             BlockNumber >> :: weigh_data (& $ weight_finalize, n)","highlight_start":1,"highlight_end":67},{"text":"         }) ?","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker ()","highlight_start":1,"highlight_end":59},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn offchain_worker","highlight_start":1,"highlight_end":27},{"text":"        (_block_number_not_used : $ trait_instance :: BlockNumber)","highlight_start":1,"highlight_end":67},{"text":"        { $ ($ impl) * }","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * } fn offchain_worker","highlight_start":1,"highlight_end":56},{"text":" ($ param : ident : $ param_ty : ty) { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":63},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":73},{"text":"    { fn offchain_worker ($ param : $ param_ty) { $ ($ impl) * } }","highlight_start":1,"highlight_end":67},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_offchain $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ;","highlight_start":1,"highlight_end":67},{"text":" { $ ($ other_where_bounds : tt) * }) =>","highlight_start":1,"highlight_end":41},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":45},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: sp_runtime :: traits","highlight_start":1,"highlight_end":77},{"text":"    :: OffchainWorker < $ trait_instance :: BlockNumber > for $ module < $","highlight_start":1,"highlight_end":75},{"text":"    trait_instance $ (, $ instance) ? > where $ ($ other_where_bounds) * { }","highlight_start":1,"highlight_end":77},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *)","highlight_start":1,"highlight_end":62},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * # [allow (unreachable_code)] $ vis fn $ name","highlight_start":1,"highlight_end":76},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ crate ::","highlight_start":1,"highlight_end":72},{"text":"    dispatch :: DispatchResult","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ crate :: sp_std :: if_std !","highlight_start":1,"highlight_end":38},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { { $ ($ impl) * } Ok (()) }","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ impl_function $ module : ident < $ trait_instance : ident : $ trait_name :","highlight_start":1,"highlight_end":78},{"text":" ident $ (< I >, $ instance : ident : $ instantiable : path) ? > ; $ origin_ty","highlight_start":1,"highlight_end":79},{"text":" : ty ; $ error_type : ty ; $ ignore : ident ; $ (# [doc = $ doc_attr : tt]) *","highlight_start":1,"highlight_end":79},{"text":" $ vis : vis fn $ name : ident","highlight_start":1,"highlight_end":31},{"text":" ($ origin : ident $ (, $ param : ident : $ param_ty : ty) *) -> $ result : ty","highlight_start":1,"highlight_end":79},{"text":" { $ ($ impl : tt) * }) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ (# [doc = $ doc_attr]) * $ vis fn $ name","highlight_start":1,"highlight_end":47},{"text":"    ($ origin : $ origin_ty $ (, $ param : $ param_ty) *) -> $ result","highlight_start":1,"highlight_end":70},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        use $ crate :: sp_std :: if_std ; if_std !","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $ crate :: tracing ; let span = tracing :: span !","highlight_start":1,"highlight_end":66},{"text":"            (tracing :: Level :: DEBUG, stringify ! ($ name)) ; let _enter =","highlight_start":1,"highlight_end":77},{"text":"            span . enter () ;","highlight_start":1,"highlight_end":30},{"text":"        } { $ ($ impl) * }","highlight_start":1,"highlight_end":27},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * # [compact] $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":79},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * # [codec (compact)] $ type, } variant $","highlight_start":1,"highlight_end":73},{"text":"        fn_name ; $ (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $ type : ty ; $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":67},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { $ ($ generated_variants) * }","highlight_start":1,"highlight_end":74},{"text":"        { $ ($ current_params) * $ type, } variant $ fn_name ; $","highlight_start":1,"highlight_end":65},{"text":"        (# [doc = $ doc_attr]) * $ ($ rest) *","highlight_start":1,"highlight_end":46},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * }","highlight_start":1,"highlight_end":73},{"text":" { $ ($ current_params : tt) * } variant $ fn_name : ident ; $","highlight_start":1,"highlight_end":63},{"text":" (# [doc = $ doc_attr : tt]) * $","highlight_start":1,"highlight_end":33},{"text":" (variant $ next_fn_name : ident ; $ ($ rest : tt) *) ?) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: decl_module !","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * }","highlight_start":1,"highlight_end":43},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $ ($ generated_variants) * # [allow (non_camel_case_types)] $","highlight_start":1,"highlight_end":74},{"text":"            (# [doc = $ doc_attr]) * $ fn_name ($ ($ current_params) *),","highlight_start":1,"highlight_end":73},{"text":"        } { } $ (variant $ next_fn_name ; $ ($ rest) *) ?","highlight_start":1,"highlight_end":58},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ create_call_enum $ call_type : ident ; < $ trait_instance : ident : $","highlight_start":1,"highlight_end":73},{"text":" trait_name : ident $","highlight_start":1,"highlight_end":22},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? >","highlight_start":1,"highlight_end":46},{"text":" { $ ($ other_where_bounds : tt) * } { $ ($ generated_variants : tt) * } { })","highlight_start":1,"highlight_end":78},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    /// Dispatchable calls.","highlight_start":1,"highlight_end":28},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// Each variant of this enum maps to a dispatchable function from the associated module.","highlight_start":1,"highlight_end":94},{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":1,"highlight_end":77},{"text":"    enum $ call_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":57},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] # [codec (skip)] __PhantomItem","highlight_start":1,"highlight_end":56},{"text":"        ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":54},{"text":"         ($ trait_instance, $ ($ instance) ?) >, $ crate :: dispatch ::","highlight_start":1,"highlight_end":72},{"text":"         Never), $ ($ generated_variants) *","highlight_start":1,"highlight_end":44},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ imp $ (# [$ attr : meta]) * pub struct $ mod_type : ident < $","highlight_start":1,"highlight_end":65},{"text":" trait_instance : ident : $ trait_name : ident $","highlight_start":1,"highlight_end":49},{"text":" (< I >, $ instance : ident : $ instantiable : path $","highlight_start":1,"highlight_end":54},{"text":"  (= $ module_default_instance : path) ?) ? > for enum $ call_type : ident","highlight_start":1,"highlight_end":75},{"text":" where origin : $ origin_type : ty, system = $ system : ident","highlight_start":1,"highlight_end":62},{"text":" {","highlight_start":1,"highlight_end":3},{"text":"     $","highlight_start":1,"highlight_end":7},{"text":"     ($ (# [doc = $ doc_attr : tt]) * # [weight = $ weight : expr] $ fn_vis :","highlight_start":1,"highlight_end":78},{"text":"      vis fn $ fn_name : ident","highlight_start":1,"highlight_end":31},{"text":"      ($ from : ident $","highlight_start":1,"highlight_end":24},{"text":"       (, $ (# [$ codec_attr : ident]) * $ param_name : ident : $ param : ty)","highlight_start":1,"highlight_end":78},{"text":"       *) $ (-> $ result : ty) * { $ ($ impl : tt) * }","highlight_start":1,"highlight_end":55},{"text":"      { $ ($ fn_instance : ident : $ fn_instantiable : path) ? }) *","highlight_start":1,"highlight_end":68},{"text":" } { $ ($ other_where_bounds : tt) * } { $ ($ deposit_event : tt) * }","highlight_start":1,"highlight_end":70},{"text":" { $ ($ on_initialize : tt) * } { $ ($ on_finalize : tt) * }","highlight_start":1,"highlight_end":61},{"text":" { $ ($ offchain : tt) * } { $ ($ constants : tt) * } { $ error_type : ty })","highlight_start":1,"highlight_end":77},{"text":"=>","highlight_start":1,"highlight_end":3},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: __check_reserved_fn_name ! { $ ($ fn_name) * } #","highlight_start":1,"highlight_end":64},{"text":"    [derive (Clone, Copy, PartialEq, Eq, $ crate :: RuntimeDebug)] $","highlight_start":1,"highlight_end":69},{"text":"    (# [$ attr]) * pub struct $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"    (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?) ? >","highlight_start":1,"highlight_end":79},{"text":"    ($ crate :: sp_std :: marker :: PhantomData <","highlight_start":1,"highlight_end":50},{"text":"     ($ trait_instance, $ ($ instance) ?) >) where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":78},{"text":"    ; $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_initialize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_initialize) *","highlight_start":1,"highlight_end":61},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_on_finalize $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ on_finalize) *","highlight_start":1,"highlight_end":59},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_block_hooks_weight $ mod_type < $ trait_instance : $ trait_name","highlight_start":1,"highlight_end":79},{"text":"        $ (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":53},{"text":"        { $ ($ other_where_bounds) * } @ init $ ($ on_initialize) * @ fin $","highlight_start":1,"highlight_end":76},{"text":"        ($ on_finalize) *","highlight_start":1,"highlight_end":26},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_offchain $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":71},{"text":"        (< I >, $ instance : $ instantiable) ? > ;","highlight_start":1,"highlight_end":51},{"text":"        { $ ($ other_where_bounds) * } $ ($ offchain) *","highlight_start":1,"highlight_end":56},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ impl_deposit_event $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"        (< I >, $ instance : $ instantiable) ? > ; $ system ;","highlight_start":1,"highlight_end":62},{"text":"        { $ ($ other_where_bounds) * } $ ($ deposit_event) *","highlight_start":1,"highlight_end":61},{"text":"    } /// Can also be called using [`Call`].","highlight_start":1,"highlight_end":45},{"text":"     ///","highlight_start":1,"highlight_end":9},{"text":"     /// [`Call`]: enum.Call.html","highlight_start":1,"highlight_end":34},{"text":"     impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":46},{"text":"    (< I >, $ instance : $ instantiable) ? > $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":77},{"text":"    (, $ instance) ? > where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":56},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $","highlight_start":1,"highlight_end":10},{"text":"        ($ crate :: decl_module !","highlight_start":1,"highlight_end":34},{"text":"         {","highlight_start":1,"highlight_end":11},{"text":"             @ impl_function $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":76},{"text":"             (< I >, $ fn_instance : $ fn_instantiable) ? > ; $ origin_type ;","highlight_start":1,"highlight_end":78},{"text":"             $ error_type ; $ from ; $ (# [doc = $ doc_attr]) * $ fn_vis fn $","highlight_start":1,"highlight_end":78},{"text":"             fn_name ($ from $ (, $ param_name : $ param) *) $ (-> $ result) *","highlight_start":1,"highlight_end":79},{"text":"             { $ ($ impl) * }","highlight_start":1,"highlight_end":30},{"text":"         }) *","highlight_start":1,"highlight_end":14},{"text":"    } $ crate :: decl_module !","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ create_call_enum $ call_type ; < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":77},{"text":"        (< I >, $ instance : $ instantiable $ (= $ module_default_instance) ?)","highlight_start":1,"highlight_end":79},{"text":"        ? > { $ ($ other_where_bounds) * } { } { } $","highlight_start":1,"highlight_end":53},{"text":"        (variant $ fn_name ; $ (# [doc = $ doc_attr]) * $","highlight_start":1,"highlight_end":58},{"text":"         ($ (# [$ codec_attr]) * $ param ;) *) *","highlight_start":1,"highlight_end":49},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetDispatchInfo for $ call_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":76},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_dispatch_info (& self) -> $ crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":77},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let weight = < dyn $ crate :: dispatch :: WeighData <","highlight_start":1,"highlight_end":75},{"text":"                     ($ (& $ param,) *) >> :: weigh_data","highlight_start":1,"highlight_end":57},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let class = < dyn $","highlight_start":1,"highlight_end":79},{"text":"                     crate :: dispatch :: ClassifyDispatch <","highlight_start":1,"highlight_end":61},{"text":"                     ($ (& $ param,) *) >> :: classify_dispatch","highlight_start":1,"highlight_end":64},{"text":"                     (& $ weight, ($ ($ param_name,) *)) ; let pays_fee = <","highlight_start":1,"highlight_end":76},{"text":"                     dyn $ crate :: dispatch :: PaysFee < ($ (& $ param,) *)","highlight_start":1,"highlight_end":77},{"text":"                     >> :: pays_fee (& $ weight, ($ ($ param_name,) *)) ; $","highlight_start":1,"highlight_end":76},{"text":"                     crate :: dispatch :: DispatchInfo","highlight_start":1,"highlight_end":55},{"text":"                     { weight, class, pays_fee, }","highlight_start":1,"highlight_end":50},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":76},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    GetCallName for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":78},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn get_call_name (& self) -> & 'static str","highlight_start":1,"highlight_end":51},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 { let _ = ($ ($ param_name), *) ; stringify ! ($ fn_name) },)","highlight_start":1,"highlight_end":79},{"text":"                * $ call_type :: __PhantomItem (_, _) => unreachable !","highlight_start":1,"highlight_end":71},{"text":"                (\"__PhantomItem should never be used.\"),","highlight_start":1,"highlight_end":57},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } fn get_call_names () -> & 'static [& 'static str]","highlight_start":1,"highlight_end":60},{"text":"        { & [$ (stringify ! ($ fn_name),) *] }","highlight_start":1,"highlight_end":47},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Clone for","highlight_start":1,"highlight_end":78},{"text":"    $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":64},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn clone (& self) -> Self","highlight_start":1,"highlight_end":34},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => $","highlight_start":1,"highlight_end":73},{"text":"                 call_type :: $ fn_name ($ ((* $ param_name) . clone ()), *),)","highlight_start":1,"highlight_end":79},{"text":"                * _ => unreachable ! (),","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: PartialEq","highlight_start":1,"highlight_end":78},{"text":"    for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":68},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn eq (& self, _other : & Self) -> bool","highlight_start":1,"highlight_end":48},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) =>","highlight_start":1,"highlight_end":71},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     let self_params = ($ ($ param_name,) *) ; if let $","highlight_start":1,"highlight_end":72},{"text":"                     call_type :: $ fn_name ($ (ref $ param_name), *) = *","highlight_start":1,"highlight_end":74},{"text":"                     _other { self_params == ($ ($ param_name,) *) } else","highlight_start":1,"highlight_end":74},{"text":"                     {","highlight_start":1,"highlight_end":23},{"text":"                         match * _other","highlight_start":1,"highlight_end":40},{"text":"                         {","highlight_start":1,"highlight_end":27},{"text":"                             $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":68},{"text":"                             unreachable ! (), _ => false,","highlight_start":1,"highlight_end":59},{"text":"                         }","highlight_start":1,"highlight_end":27},{"text":"                     }","highlight_start":1,"highlight_end":23},{"text":"                 }) * _ => unreachable ! (),","highlight_start":1,"highlight_end":45},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Eq for $","highlight_start":1,"highlight_end":77},{"text":"    call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":62},{"text":"    ($ other_where_bounds) * { } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":74},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: fmt ::","highlight_start":1,"highlight_end":75},{"text":"    Debug for $ call_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":74},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn fmt (& self, _f : & mut $ crate :: dispatch :: fmt :: Formatter,)","highlight_start":1,"highlight_end":77},{"text":"        -> $ crate :: dispatch :: result :: Result < (), $ crate :: dispatch","highlight_start":1,"highlight_end":77},{"text":"        :: fmt :: Error >","highlight_start":1,"highlight_end":26},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match * self","highlight_start":1,"highlight_end":25},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ (ref $ param_name), *) => write !","highlight_start":1,"highlight_end":79},{"text":"                 (_f, \"{}{:?}\", stringify ! ($ fn_name),","highlight_start":1,"highlight_end":57},{"text":"                  ($ ($ param_name . clone (),) *)),) * _ => unreachable ! (),","highlight_start":1,"highlight_end":79},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    Dispatchable for $ call_type < $ trait_instance $ (, $ instance) ? > where","highlight_start":1,"highlight_end":79},{"text":"    $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":31},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        type Trait = $ trait_instance ; type Origin = $ origin_type ; fn","highlight_start":1,"highlight_end":73},{"text":"        dispatch (self, _origin : Self :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":78},{"text":"        DispatchResult","highlight_start":1,"highlight_end":23},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            match self","highlight_start":1,"highlight_end":23},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                $","highlight_start":1,"highlight_end":18},{"text":"                ($ call_type :: $ fn_name ($ ($ param_name), *) =>","highlight_start":1,"highlight_end":67},{"text":"                 {","highlight_start":1,"highlight_end":19},{"text":"                     $ crate :: decl_module !","highlight_start":1,"highlight_end":46},{"text":"                     (@ call $ from $ mod_type < $ trait_instance $","highlight_start":1,"highlight_end":68},{"text":"                      (, $ fn_instance) ? > $ fn_name _origin $ system","highlight_start":1,"highlight_end":71},{"text":"                      [$ ($ param_name), *])","highlight_start":1,"highlight_end":45},{"text":"                 },) * $ call_type :: __PhantomItem (_, _) =>","highlight_start":1,"highlight_end":62},{"text":"                { unreachable ! (\"__PhantomItem should never be used.\") },","highlight_start":1,"highlight_end":75},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch :: Callable <","highlight_start":1,"highlight_end":79},{"text":"    $ trait_instance > for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":78},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    { type Call = $ call_type < $ trait_instance $ (, $ instance) ? > ; } impl","highlight_start":1,"highlight_end":79},{"text":"    < $ trait_instance : $ trait_name $ (< I >, $ instance : $ instantiable) ?","highlight_start":1,"highlight_end":79},{"text":"    > $ mod_type < $ trait_instance $ (, $ instance) ? > where $","highlight_start":1,"highlight_end":65},{"text":"    ($ other_where_bounds) *","highlight_start":1,"highlight_end":29},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        # [doc (hidden)] pub fn dispatch < D : $ crate :: dispatch ::","highlight_start":1,"highlight_end":70},{"text":"        Dispatchable < Trait = $ trait_instance >>","highlight_start":1,"highlight_end":51},{"text":"        (d : D, origin : D :: Origin) -> $ crate :: sp_runtime ::","highlight_start":1,"highlight_end":66},{"text":"        DispatchResult { d . dispatch (origin) }","highlight_start":1,"highlight_end":49},{"text":"    } $ crate :: __dispatch_impl_metadata !","highlight_start":1,"highlight_end":44},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ call_type $ origin_type","highlight_start":1,"highlight_end":65},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            $","highlight_start":1,"highlight_end":14},{"text":"            ($ (# [doc = $ doc_attr]) * fn $ fn_name","highlight_start":1,"highlight_end":53},{"text":"             ($ from $ (, $ (# [$ codec_attr]) * $ param_name : $ param) *) ;)","highlight_start":1,"highlight_end":79},{"text":"            *","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } $ crate :: __impl_module_constants_metadata !","highlight_start":1,"highlight_end":52},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $ mod_type < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":55},{"text":"        (< I >, $ instance : $ instantiable) ? >","highlight_start":1,"highlight_end":49},{"text":"        { $ ($ other_where_bounds) * } $ ($ constants) *","highlight_start":1,"highlight_end":57},{"text":"    } impl < $ trait_instance : $ trait_name $","highlight_start":1,"highlight_end":47},{"text":"    (< I >, $ instance : $ instantiable) ? > $ crate :: dispatch ::","highlight_start":1,"highlight_end":68},{"text":"    ModuleErrorMetadata for $ mod_type < $ trait_instance $ (, $ instance) ? >","highlight_start":1,"highlight_end":79},{"text":"    where $ ($ other_where_bounds) *","highlight_start":1,"highlight_end":37},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        fn metadata () -> & 'static [$ crate :: dispatch :: ErrorMetadata]","highlight_start":1,"highlight_end":75},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            < $ error_type as $ crate :: dispatch :: ModuleErrorMetadata > ::","highlight_start":1,"highlight_end":78},{"text":"            metadata ()","highlight_start":1,"highlight_end":24},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `BlockNumber` in bounds of `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:89:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mdecl_module! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub struct Module<T: Trait> for enum Call where origin: T::Origin {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        type Error = Error<T>;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m381\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m382\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `BlockNumber`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":33722,"byte_end":33748,"line_start":686,"line_end":686,"column_start":45,"column_end":71,"is_primary":true,"text":[{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":45,"highlight_end":71}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m<::frame_support::dispatch::decl_module macros>:686:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m686\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"<::frame_support::dispatch::decl_module macros>","byte_start":33694,"byte_end":33720,"line_start":686,"line_end":686,"column_start":17,"column_end":43,"is_primary":true,"text":[{"text":"     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub","highlight_start":17,"highlight_end":43}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m<::frame_support::dispatch::decl_module macros>:686:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m686\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     # [derive ($ crate :: codec :: Encode, $ crate :: codec :: Decode)] pub\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":11378,"byte_end":11390,"line_start":423,"line_end":423,"column_start":16,"column_end":28,"is_primary":true,"text":[{"text":"\t\tsigners: Vec<T::AccountId>,","highlight_start":16,"highlight_end":28}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:423:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m423\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        signers: Vec<T::AccountId>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":12491,"byte_end":12503,"line_start":454,"line_end":454,"column_start":22,"column_end":34,"is_primary":true,"text":[{"text":"\t\tcondition_address: T::AccountId, ","highlight_start":22,"highlight_end":34}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:454:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m454\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        condition_address: T::AccountId, \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":12529,"byte_end":12541,"line_start":456,"line_end":456,"column_start":10,"column_end":22,"is_primary":true,"text":[{"text":"\t\towner: T::AccountId,","highlight_start":10,"highlight_end":22}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:456:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m456\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        owner: T::AccountId,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":12554,"byte_end":12566,"line_start":457,"line_end":457,"column_start":12,"column_end":24,"is_primary":true,"text":[{"text":"\t\tgrantee: T::AccountId,","highlight_start":12,"highlight_end":24}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:457:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m457\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        grantee: T::AccountId,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `AccountId` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":12575,"byte_end":12587,"line_start":458,"line_end":458,"column_start":8,"column_end":20,"is_primary":true,"text":[{"text":"\t\tdid: T::AccountId,","highlight_start":8,"highlight_end":20}],"label":"ambiguous associated type `AccountId`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `AccountId` in bounds of `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:458:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m458\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        did: T::AccountId,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `AccountId`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"ambiguous associated type `Origin` in bounds of `T`","code":{"code":"E0221","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0221\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: Self::A;\n    }\n}\n```\n\nIn this example, `Foo` defines an associated type `A`. `Bar` inherits that type\nfrom `Foo`, and defines another associated type of the same name. As a result,\nwhen we attempt to use `Self::A`, it's ambiguous whether we mean the `A` defined\nby `Foo` or the one defined by `Bar`.\n\nThere are two options to work around this issue. The first is simply to rename\none of the types. Alternatively, one can specify the intended type using the\nfollowing syntax:\n\n```\ntrait T1 {}\ntrait T2 {}\n\ntrait Foo {\n    type A: T1;\n}\n\ntrait Bar : Foo {\n    type A: T2;\n    fn do_something() {\n        let _: <Self as Bar>::A;\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":2744,"byte_end":2753,"line_start":90,"line_end":90,"column_start":58,"column_end":67,"is_primary":true,"text":[{"text":"\tpub struct Module<T: Trait> for enum Call where origin: T::Origin {","highlight_start":58,"highlight_end":67}],"label":"ambiguous associated type `Origin`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated type `T` could derive from `frame_system::Trait`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0221]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type `Origin` in bounds of `T`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:90:58\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub struct Module<T: Trait> for enum Call where origin: T::Origin {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous associated type `Origin`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: associated type `T` could derive from `frame_system::Trait`\u001b[0m\n\n"}
{"message":"aborting due to 36 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 36 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0221, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0221, E0433.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0221`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0221`.\u001b[0m\n"}
